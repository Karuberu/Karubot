<?xml version="1.0" encoding="utf-8"?>
<AutoWikiBrowserPreferences xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xml:space="preserve" Version="5.9.0.0">
  <Project>custom</Project>
  <LanguageCode>en</LanguageCode>
  <CustomProject>ffxiclopedia.wikia.com/</CustomProject>
  <Protocol>http://</Protocol>
  <LoginDomain />
  <List>
    <ListSource />
    <SelectedProvider>CategoryListProvider</SelectedProvider>
    <ArticleList />
  </List>
  <FindAndReplace>
    <Enabled>true</Enabled>
    <IgnoreSomeText>false</IgnoreSomeText>
    <IgnoreMoreText>false</IgnoreMoreText>
    <AppendSummary>false</AppendSummary>
    <Replacements>
      <Replacement>
        <Find>\&lt; *br *\/? *\&gt;</Find>
        <Replace>&lt;br&gt;</Replace>
        <Comment>Technical (&lt;br&gt; uniformity)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=^[^\s]+?)[ \t]+$</Find>
        <Replace />
        <Comment>Whitespace (Remove trailing whitespace)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=\[\[|\{\{)\s*(.+?)\s*(?=\]\]|\}\})</Find>
        <Replace>$1</Replace>
        <Comment>Whitespace (Remove spaces within templates/links)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=(?:\[\[|\{\{).*?)[ \t]*(\|)[ \t]*(?=.*?(?:\]\]|\}\}))</Find>
        <Replace>$1</Replace>
        <Comment>Whitespace (Remove spaces inside templates/links)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>^\s+(?=(?:__NOTOC__|\[\[Category))</Find>
        <Replace />
        <Comment>Whitespace (Remove leading spaces)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=\[\[Category:.+?\]\])\s+(?=\[\[Category)</Find>
        <Replace />
        <Comment>Whitespace (Remove space between categories)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=\[\[Category:([^\]]+?)\]\](?:.|\n)*?)\[\[Category:\1\]\]</Find>
        <Replace />
        <Comment>Cleanup (Remove duplicate categories)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>&lt;!--!!!!Marked\ for\ Bot!!!!--&gt;</Find>
        <Replace />
        <Comment>Cleanup (Remove comment)</Comment>
        <IsRegex>false</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\s*\&lt;!--Use '''Crafted Only!''' if item is obtained by synthesis only--\&gt;</Find>
        <Replace />
        <Comment>Cleanup (Remove comment)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\s*\&lt;!--Use \{\{Crafted Only\}\} if item is obtained by synthesis only--\&gt;</Find>
        <Replace />
        <Comment>Cleanup (Remove comment)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\s*\&lt;!--same format for Excavation, Mining, Logging, Harvesting, Clamming--\&gt;</Find>
        <Replace />
        <Comment>Cleanup (Remove comment)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\s*\&lt;!-- For Weapons and Armor\. Info is to be displayed exactly as it is in\-game\. --\&gt;</Find>
        <Replace />
        <Comment>Cleanup (Remove comment)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\s*\&lt;!-- For Weapons, Armor, Food, or Medicine, go the following page and copy the text in the "Usage" section of that page\. --\&gt;</Find>
        <Replace />
        <Comment>Cleanup (Remove comment)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\s*\&lt;!-- Number in a stack, or Not Stackable --\&gt;</Find>
        <Replace />
        <Comment>Cleanup (Remove comment)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\s*\&lt;!--Same format for Special Events--\&gt;</Find>
        <Replace />
        <Comment>Cleanup (Remove comment)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\s*\&lt;!-- Usage is \{\{Guild Points Value|points per item|maximum points}} If nothing is defined, it will display None\. See Template:Guild Points Value for more details\. --\&gt;</Find>
        <Replace />
        <Comment>Cleanup (Remove comment)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\s*&lt;!-- Usage is {{Resale Price|&lt;min&gt;|&lt;max&gt;}} or {{Resale Price|None}} if the item can't be sold\. See Template:Resale Price for more details\. --\&gt;</Find>
        <Replace />
        <Comment>Cleanup (Remove comment)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\s*\&lt;!-- Template:Weapon, Template:Armor, Template:Food, Template: Medicine --\&gt;</Find>
        <Replace />
        <Comment>Cleanup (Remove comment)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\*\[\[]]</Find>
        <Replace />
        <Comment>Cleanup (Remove stub)</Comment>
        <IsRegex>false</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\*\[\[\&lt;stat\&gt;\|\{\{\&lt;Color\&gt;\|\&lt;stat and modifier\&gt;\}\}\]\]\s+</Find>
        <Replace />
        <Comment>Cleanup (Remove stub)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\[\[ *([^\|]*?) *(?:\| *\1 *)?\]\]</Find>
        <Replace>[[$1]]</Replace>
        <Comment>Cleanup (Remove unnecessary link)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\{\{Template:</Find>
        <Replace>{{</Replace>
        <Comment>Cleanup (Remove unnecessary namespace)</Comment>
        <IsRegex>false</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?:\&lt;br\&gt;)*(\n?^[\:\*]+.+?)(?:\&lt;br\&gt;)*\n+</Find>
        <Replace>$1\n</Replace>
        <Comment>Cleanup (Remove unnecessary breaks in list)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\{\{(Rare|Exclusive|Temp|Aug(?:ment)?)2}}</Find>
        <Replace>{{$1|nc}}</Replace>
        <Comment>Cleanup (Remove deprecated template: Rare2/Ex2/Temp2/Aug2/Augment2)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>false</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\{\{EvolithShape (Filled|Empty)(.+?)(Down|Up)?\|(.+?)\}\} *(\d+)</Find>
        <Replace>{{Evolith|$4|$1 $2 $3|$5}}</Replace>
        <Comment>Cleanup (Remove deprecated template: EvolithShape)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Evolith\|.+?) (\|.+)</Find>
        <Replace>$1$2</Replace>
        <Comment>Cleanup (Remove deprecated template: EvolithShape)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>[' ]*\[\[(Fire|Earth|Water|Wind|Ice|Lightning|Light|Dark) Crystal\|[' ]*\&lt; *font *color=".+?" *\&gt;[ ']*\1 *Crystal[' ]*\&lt; */ *font *\&gt;[' ]*\]\][' \:]*</Find>
        <Replace>{{$1|Crystal}}</Replace>
        <Comment>Apply template (Crystal)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\[\[(Fire|Earth|Water|Wind|Ice|Lightning|Light|Dark) Crystal\|\{\{\1\|\1 *Crystal\}\}\]\]</Find>
        <Replace>{{$1|Crystal}}</Replace>
        <Comment>Apply template (Crystal)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\{\{(.+)\|\1 Crystal\}\}</Find>
        <Replace>{{$1|Crystal}}</Replace>
        <Comment>Cleanup template (Crystal)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(__NOTOC__)(.+)$</Find>
        <Replace>$2$1</Replace>
        <Comment>Cleanup (Move NOTOC to end of line)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=__NOTOC__(?:.*\n)*?)__NOTOC__</Find>
        <Replace />
        <Comment>Cleanup (Remove duplicate NOTOC)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=^[^\s:]+)(?=\{\|)</Find>
        <Replace>\n</Replace>
        <Comment>Fix table (Leading whitespace)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>false</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=^\|\})(?=[^\}].+?\n)</Find>
        <Replace>\n</Replace>
        <Comment>Fix table (Trailing whitespace)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>false</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=\{\|.*?\n(?:(?!\|\}).*?\n)+(?!\|\}).*?)$</Find>
        <Replace>\n|}</Replace>
        <Comment>Fix table (Add missing footer)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>false</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=^(?:\|-|\{\|).*\s+)^\|\s*\|</Find>
        <Replace>|</Replace>
        <Comment>Fix table (Invalid cell)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>false</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=[^\=\n]+?)((\={2,4})[^\=\n]+?\2)\n*</Find>
        <Replace>\n$1\n</Replace>
        <Comment>Fix header</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=^[^\s]+?)[ \t]+$</Find>
        <Replace />
        <Comment>Whitespace (Remove trailing whitespace; after fixes)</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>cellspaing</Find>
        <Replace>cellspacing</Replace>
        <Comment>Typo</Comment>
        <IsRegex>false</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>([^'])([ ']+)([^'^\n]+?)\2((?:\&lt;br\&gt;| )+)\2</Find>
        <Replace>$1$2$3$4</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(^'''.+?)\&lt;br\/?\&gt;(.+?''(?:&lt;br\/?\&gt;)*\n)</Find>
        <Replace>$1'''&lt;br&gt;\n''$2</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\[\[File\:.+?\]\] *\n)(__NOTOC__ *\n)</Find>
        <Replace>$2$1</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(__NOTOC__\n)\[\[(?:File|Image):(.+?\.[A-Za-z]{3,4})(?:\|(.*?))?\]\]</Find>
        <Replace>$1{{Item Image|$2|$3}}</Replace>
        <Comment>Item Image</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(__NOTOC__\n){{image-stub}}</Find>
        <Replace>$1{{Item Image|}}</Replace>
        <Comment>Item Image</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\{\{Item Image\|(.+?)\|\}\}</Find>
        <Replace>{{Item Image|$1}}</Replace>
        <Comment>Item Image</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\{\{Item Image(?:\| *link *= *.+?)?\|(.+?)(?:\| *link *= *.+?)?\}\}</Find>
        <Replace>{{Item Image|$1}}</Replace>
        <Comment>Item Image</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Item Image.+?)\|\{\{PAGENAME\}\}\}\}</Find>
        <Replace>$1}}</Replace>
        <Comment>Item Image</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>^(.+) +$</Find>
        <Replace>$1</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=\:[' ]*(?:Yield|Yeild|HQ *\d?)[: ']*)('*)([\d\?\-\+]+) *x *(.+)\1</Find>
        <Replace>$1$3$1 x $2</Replace>
        <Comment>Yield</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=[\:\*]?'+(?:Yield|HQ *\d?):?'+ *)''(\[\[.+?\]\])''</Find>
        <Replace>$1</Replace>
        <Comment>Yield</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=\:[' ]*(?:Yield|Yeild|HQ *\d?)[:' ]*?)('+)(.+?) *x *(\d+)\1</Find>
        <Replace>$1$2$1 x $3</Replace>
        <Comment>Yield</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>[' ]*(Used For|Weapon Upgrade)[\:' ]*\[\[Adventuring Fellow Guide#Adventuring Fellow Weapon Upgrades\|Adventuring Fellow Weapon Upgrade\]\]</Find>
        <Replace>'''[[Adventuring Fellow]]:''' [[Adventuring Fellow Guide#Adventuring Fellow Weapons|Weapon Upgrade]]</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\[\[(?!Weapon)+( Skill)\]\]</Find>
        <Replace>[[$1$2|$1 skill]]</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\[\[(Latent Effect)\]\]</Find>
        <Replace>[[$1|Latent effect]]</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\[\[(MP|HP)( Recovered While Healing)\]\]</Find>
        <Replace>[[$1$2|$1 recovered while healing]]</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\[\[(Avatar Perpetuation Cost)\]\]</Find>
        <Replace>[[$1|Avatar perpetuation cost]]</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\[\[(Damage Varies By Moon Phase)\]\]</Find>
        <Replace>[[$1|Damage varies by moon phase]]</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>[\[]*'''[ \[]*(?:[Aa]dditional +[Ee]ffect\|?)+(?: *vs\. *([\w ]+))?[\]\:' ]*(?:\[+(?:[^\]]+\|)?(?:\{\{\w+\|)?([\w ]+)(?:\}\})?|(\[*"[\w \[\]]+"\]*))[\]' ]*</Find>
        <Replace>{{Additional Effect|$2$3|vs = $1}}</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Additional Effect\|.+)\|vs[\= \n]+(\}\})</Find>
        <Replace>$1$2</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>((?:.*?\n)+.*?)((?:\[\[(?:category|\w\w):.+?\]\]\s*)+)</Find>
        <Replace>$2$1</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>^((?:\&lt;br\/?\&gt;)+)(\{\|[\w ])</Find>
        <Replace>$1\n$2</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>^(\{\{Craft\|[\w ]+?\|[\(\)\d ]+?\}\})'+$</Find>
        <Replace>$1</Replace>
        <Comment>Craft</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>['\[ ]+(?:Guild Points *\|)?Guild Points Value[\]:' ]*(N/A|)[']*\n?(?:\&lt;br[/\\]?\&gt;){2}\n?</Find>
        <Replace />
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>[']*Used in Quest(s?)[:']+ </Find>
        <Replace>'''[[:Category:Quests|Used in Quest$1]]:''' </Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>[' \[]*\:Category\:Quests\|Used in Quest[s\]:' ]*(?:None|Unknown|\?*)[' ]*(?:\n*\&lt;br[/\\]?\&gt;){1,2}\n( *[^:^*])</Find>
        <Replace>$1</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\n?(?:\&lt;br[/\\]?\&gt;){2}\n?[\[' ]*\:Category\:Quests\|Used in Quest[\]': s]*(?:None|Unknown)[' ]*</Find>
        <Replace />
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>^[ ']*Crafted Only[\.!]?[' ]*$</Find>
        <Replace>{{Crafted Only}}</Replace>
        <Comment>Crafted Only</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>'''''Only\ obtainable\ through\ \[\[\#Synthesis\ Recipes\|synthesis]]\.'''''</Find>
        <Replace>{{Crafted Only}}</Replace>
        <Comment>Crafted Only</Comment>
        <IsRegex>false</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\n?[ ']*(?:View|See) the entire[' ]*\[\[(.*?)\]\]\.?'*</Find>
        <Replace>\n{{Equipment Set|$1}}</Replace>
        <Comment>Equipment Set</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>[']*\[\[(?:Guild Points\|)?Guild Points Value\]\][']*:[' ]*([\d\,]+|None)(?: */ *([\d\,]+)([' ]*\([\d\. ]+ *(?:items?)? *\))?)?[']*</Find>
        <Replace>{{Guild Points Value|$1|$2}}</Replace>
        <Comment>Guild Points</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\{\{Guild\ Points\ Value\|None\|}}</Find>
        <Replace>{{Guild Points Value|0}}</Replace>
        <Comment>Guild Points</Comment>
        <IsRegex>false</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>['\[]*Resale Price[\]:' ]*(?:None|Cannot be sold to NPCs?|Cannot be sold)[!\.]?[']*</Find>
        <Replace>{{Resale Price|None}}</Replace>
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>[']*\[\[Resale Price\]\][\:']* ([\d\,]+)(?: *gils?)? +- +(([\d\,\?]+)~|\?+~) \[*gils?\]*</Find>
        <Replace>{{Resale Price|$1|$2|exact min}}</Replace>
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>[']*\[\[Resale Price\]\][\:']* (?:~([\d\,]+)|~?\?+)(?: *gils?)? +- +([\d\,]+) *\[*gils?\]*</Find>
        <Replace>{{Resale Price|$1|$2|exact max}}</Replace>
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>^[' \[ ]*Resale Price[\]': \-]*~?([\d\,\?X]+)?(?: *gils?)? *[\~\-]? *([\d\,\?X]+|\{\{(?:Question|Information Needed|Verification)\}\}|unknown)?(?: *\[*gils?\]*)?[']*</Find>
        <Replace>{{Resale Price|$1|$2}}</Replace>
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>^[' \[ ]*Resale Price[\]': \-]*~?([\d\,\?X]+)?(?: *gils?)?</Find>
        <Replace>{{Resale Price|$1}}</Replace>
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=\{\{Resale Price\|[^\{]*?)\{\{(?:verification|information needed|question)\}\}(?=\}\}|\|)</Find>
        <Replace />
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\{\{Resale Price\|[\?X]+\|[\?X]+\}\}</Find>
        <Replace>{{Resale Price|}}</Replace>
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Resale Price\|[\d\,]*)\|[\?\,]+\|?(\}\})</Find>
        <Replace>$1$2</Replace>
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Resale Price\|)[\?\,]+\|([\d\,]*)\|?(\}\})</Find>
        <Replace>$1$2$3</Replace>
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Resale Price\|[\d\,]+)[\-\~ ]+([\d\,]+\}\})</Find>
        <Replace>$1|$2</Replace>
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Resale Price\|)(?:X+\|)?([\d\,]+)(?:X+\|)?(\}\})</Find>
        <Replace>$1$2$3</Replace>
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Resale Price\|.*?)\|\}\}</Find>
        <Replace>$1}}</Replace>
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Resale Price[^\}]*\}\}) *\{\{(?:Information Needed|Question)\}\}</Find>
        <Replace>$1</Replace>
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\{\{Resale Price\|+(?:\{\{(?:Question|Information Needed|Verification)\}\}|unknown)\|*\}\}</Find>
        <Replace>{{Resale Price|}}</Replace>
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\{\{Resale Price(?:\?*\|?)*\}\}</Find>
        <Replace>{{Resale Price|}}</Replace>
        <Comment>Resale Price</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\:'''HQ *(\d)\:''' *\n</Find>
        <Replace>:'''HQ $1:''' ???\n</Replace>
        <Comment>Synthesis Recipe</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(Crystal[\]\}]+\n):\[\[(.*?)\|\{\{Color\|Neutral\|\1\}\}\]\]</Find>
        <Replace>$1:{{Crafting Tool|$2}}</Replace>
        <Comment>Crafting Tool</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\:[' ]*\[\[(.+?)\|[' ]*\&lt; *font *color *= *" *(?:sienna) *" *\&gt;[' ]*\1[' ]*\&lt; *\/ *font *\&gt;[' ]*\]\][' ]*</Find>
        <Replace>:{{Crafting Tool|$1}}</Replace>
        <Comment>Crafting Tool</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Guild Points Value\|\d+),?(\d+\|\d+),?(\d+\}\})</Find>
        <Replace>$1$2$3</Replace>
        <Comment>Guild Points</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\{\{Guild Points Value\}\}</Find>
        <Replace>{{Guild Points Value|0}}</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\* *\{\{ *[Cc]olorlink *\| *([Pp]ositive|[Nn]egative|[Nn]eutral) *\|(.*?)\|\2(?: *([+-][\d.~-]+%*)){0,1}\}\}</Find>
        <Replace>*{{Effect|$1|$2|$3}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\* *\{\{ *[Cc]olorlink *\| *([Pp]ositive|[Nn]egative|[Nn]eutral) *\|(.*?)\}\}</Find>
        <Replace>*{{Effect|$1|$2}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\* *\[\[(.*?)\|\{\{ *[Cc]olor *\| *([Pp]ositive|[Nn]egative|[Nn]eutral) *\|\1(?: *([+-][\d\.\~\-\?]+%*)){0,1}\}\}\]\]</Find>
        <Replace>*{{Effect|$2|$1|$3}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\* *(?:\[\[(.*?)\|)?\{\{ *[Cc]olor *\| *([Pp]ositive|[Nn]egative|[Nn]eutral) *\|(.*?)\}\}(?:\]\])?</Find>
        <Replace>*{{Effect|$2|$1|display = $3}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\* *\[\[(.*?)\|\{\{ *([Ww]ind|[Ff]ire|[Ee]arth) *\| *\1(?: *([+-][\d\.\~\-\?]+%*)){0,1}\}\}\]\]</Find>
        <Replace>*{{Effect|$2|$1|$3}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\* *\[\[(.*?)\|\{\{ *([Ww]ind|[Ff]ire|[Ee]arth) *\| *(.*?)\}\}\]\]</Find>
        <Replace>*{{Effect|$2|$1|display = $3}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\* *[']*\[\[ *(.*?) *\| *\&lt; *font *color *= *"(.*?)" *\&gt;[' ]*\1(?: *([+-][\d\.\~\-?]+%*)){0,1}(.*?)[' ]*\&lt;/ *font *\&gt; *\]\][']*</Find>
        <Replace>*{{Effect|$2|$1|$3$4}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\* *[']*\[\[ *(.*?) *\|\ *&lt; *font *color *= *"(.*?)" *\&gt;[' ]*(.*?(?: *([+-][\d\.\~\-?]+%*))?.*?)[' ]*\&lt;/ *font *\&gt; *\]\][']*</Find>
        <Replace>*{{Effect|$2|$1|display = $3}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Effect.*?\|)(?:Wind|green)(\|.*?\}\})</Find>
        <Replace>$1Positive$2</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Effect.*?\|)(?:Fire|red)(\|.*?\}\})</Find>
        <Replace>$1Negative$2</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Effect.*?\|)(?:Earth|#cc9900)(\|.*?\}\})</Find>
        <Replace>$1Neutral$2</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Effect.*?)(?:\}\}){0,1}[' ]*\((?:Cap|Max):* *([\d\+\-\~]+)\)[']*(?: *\}\}){0,1}</Find>
        <Replace>$1|cap = $2}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Effect.*?)(?:\}\}){0,1}[ ']*\(*(?:Cap|Max):* *([\d-+~]+) *@ *([\d\+\-\~\?]+) *(?:Base ){0,1}[\w \.]*?\)[']*(?: *\}\}){0,1}</Find>
        <Replace>$1|cap = $2|cap base = $3}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Effect.*?)\}\}[' ]*\((?:Cap|Max):* *(?:\?+|\{\{Information Needed\}\})\)[']*(?: \{\{Information Needed\}\})?</Find>
        <Replace>$1|cap = ???}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Effect.*?)\}\} \((?:Cap|Max):* *(?:\?+|\{\{Information Needed\}\}) *@ *([\d\+\-\~\?]+) *(?:Base ){0,1}\w*?\)(?: \{\{Information Needed\}\})?</Find>
        <Replace>$1|cap = ???|cap base = $2}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Effect.*?)\}\}\n:+['\(]+(.*?)['\)]+</Find>
        <Replace>$1|note = $2}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Effect.*?)\}\} *\{\{verification(\|.*)</Find>
        <Replace>$1$2 {{verification}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Effect.*?)\|\|+(.*?\}\})</Find>
        <Replace>$1|$2</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Effect\|(?:Positive|Negative|Neutral)\|)display *= *(.+?) *([+-][\d\.\~\-?]+%?)?((\|.*)?(?:\}\}))</Find>
        <Replace>$1$2|$3$4</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Effect.*?)\|\}\}</Find>
        <Replace>$1}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Effect.*?\|)(.+?)\|display = \2.*?((?:\|.+)?\}\})</Find>
        <Replace>$1$2$3</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\* *\{\{ *[Cc]olorlink *\| *([Pp]ositive|[Nn]egative|[Nn]eutral) *\|(.*?)\|(.*?)\}\}</Find>
        <Replace>*{{Effect|$1|$2|display = $3}}</Replace>
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\* *\{\{ *Effect *\| *(Positive|Negative|Neutral) *\| *\&lt;stat\&gt; *\| *display *= *\1 *Stats\}\}\n</Find>
        <Replace />
        <Comment>Effect</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\[\[(?:\:Category\:)?(alchemy|bonecraft|smithing|goldsmithing|cooking|leathercraft|clothcraft|woodworking)(?:\|\1)?\]\] *(\(?[\d\?\-\+]+\)?)</Find>
        <Replace>{{Craft|$1|$2}}</Replace>
        <Comment>Craft</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Craft\|.+?\|.+?)\)(?:\}\})?[' ]*(\{\{(?:verification|question|Information Needed)\}\})(?:\}\})?</Find>
        <Replace>$1$2)}}</Replace>
        <Comment>Craft</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Craft\|.+?\|\w+)\(\?*\)\}\}</Find>
        <Replace>$1}}</Replace>
        <Comment>Craft</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\{\{Craft\|.+?\|\(?)\{\{(?:question|information needed)\}\}(\)?\}\})</Find>
        <Replace>$1?$2</Replace>
        <Comment>Craft</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(^\{\{(?:Armor|Item Statistics)\s+(?:^\|.+|\n)+)^\}\}(?:\&lt;br\&gt;|\s)*((?:[':\*].*|\&lt;br\&gt;|\s)+?)(?=^\|width="50%" valign="top"\|\s+\=\=Other Uses\=\=)</Find>
        <Replace>$1| notes = $2}}</Replace>
        <Comment>Item notes</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *(jobs|races) *=[' ]*(All )?\1[' (?:\&lt;br\/?\&gt;)]*\n+</Find>
        <Replace />
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>^\| *(?:name|tags|races|damage|delay|stats|image.*?|description|evolith *\d|charges|use delay|recast|stackable|level|jobs|notes) *=(?:\&lt;br\/?\&gt;|[\n '])*$\n</Find>
        <Replace />
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=^\{\{Synthesis Recipes\s+(?:.|\n)+)^\| recipe \d =\s+(?=^(?:\| recipe|\}\}))</Find>
        <Replace />
        <Comment>Template cleanup</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>[' \[][^\|\n]*\|Used in Quest[s \]:'\n]*(?=^\|-)</Find>
        <Replace />
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *(description) *= *''(.+)''</Find>
        <Replace>| $1 = $2</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *races *= *(?:All Races)?\n</Find>
        <Replace />
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *races *= *H\n</Find>
        <Replace>| races = Hume</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *races *= *E\n</Find>
        <Replace>| races = Elvaan</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *races *= *T\n</Find>
        <Replace>| races = Tarutaru</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *races *= *G\n</Find>
        <Replace>| races = Galka</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *races *= *M\n</Find>
        <Replace>| races = Mithra</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\| *duration *\= *\d+ *)Hour(s?)</Find>
        <Replace>$1hour$2</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\| *duration *\= *\d+ *)Minute(s?)</Find>
        <Replace>$1minute$2</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\| *duration *\= *\d+ *)Second(s?)</Find>
        <Replace>$1second$2</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *(stackable|duration) *\= *(\?+|\{\{(Information( Needed)?|Question)\}\}|\1).*\n</Find>
        <Replace>| $1 = ???\n</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\| *effects *\=\s*)(?:^[\*\: ]*(?:\?+|unknown|\{\{(?:question|information needed)\}\})\s+)+(^\| *\w+|^\}\})</Find>
        <Replace>$1$2</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *evolith(\d)</Find>
        <Replace>| evolith $1</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *ilevel *= *</Find>
        <Replace>| item level = </Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=^\=\= *(?:Synthesis Recipes?|Used in Recipes?|Desynthesis *Recipes?|Obtained from Desynthesis) *\=\= *$)\s+(?:\s*(?:\&lt;br\&gt;)*)*(\*)?[' ]*(?:Unknown|\?+)?[' ]*?\n+(?:^\|\- *$\s+)*(?:(^\| *width\=" *50\% *" *valign\=\"top\"\| *$|^\|\} *$)\s+)+</Find>
        <Replace>\n$1{{Information Needed}}\n$2\n</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\{\| *cellpadding *\= *\" *(\d+) *\" *width\=\" *(\d+\%)\ *" *( *border *= *" *\d+ *" *)?</Find>
        <Replace>{|cellpadding="$1" width="$2"$3</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *valign *= *"top" *width *= *" *50% *" *\|\s+</Find>
        <Replace>|width="50%" valign="top"|\n</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *width *= *" *50% *" *valign *= *" *top *" *\|\s*</Find>
        <Replace>|width="50%" valign="top"|\n</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\|width="50%" *valign="top"\|\n)(\|-\n)(?=\=\=(?:De)?synthesis Recipes?\=\=)</Find>
        <Replace>$2$1</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=\=\=((?:Des|S)ynthesis Recipes?|Used in Recipes?|Obtained from Desynthesis)\=\=)\s*(?=(?:\|\-\s+)?\|width="50%" valign="top"\||\|\})</Find>
        <Replace>\n{{Information Needed}}\n</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\s*(?:__NOTOC__)?\s*(?:^\{\| *cellpadding *\= *\" *\d+ *\" *width\=\" *\d+\%\ *" *(?: *border *= *" *\d+ *" *)?$\s+)*(?:^\|\- *$\s+)*(?:^\| *width\=" *\d+\% *" *valign\=\"top\"(?: *align="left")?\| *$\s+)*^== *Statistics *\=\= *$\s+(.*?)(?:\s*(?:\&lt;br\&gt;)*)*\n(?:^\|\- *$\s+)*(?:^\| *width\=" *\d+\% *" *valign\=\"top\"(?: *align="left")?\| *$\s+)*^== *Other *Uses? *\=\= *$\s+(.*?)(?:\s*(?:\&lt;br\&gt;)*)*\n(?:^\|\}\s*^\{\|.+?\n)?(?:^\|\- *$\s+)*(?:^\| *width\=" *\d+\% *" *valign\=\"top\"(?: *align="left")?\| *$\s+)*^== *Synthesis *Recipes? *\=\= *$\s+(.*?)(?:\s*(?:\&lt;br\&gt;)*)*\n(?:^\s*(?:\&lt;br\&gt;)*)*(?:^\|\- *$\s+)*(?:^\| *width\=" *\d+\% *" *valign\=\"top\"(?: *align="left")?\| *$\s+)*^== *Used *[Ii]n *Recipes? *\=\= *$\s+(.*?)(?:\s*(?:\&lt;br\&gt;)*)*\n(?:^\|\- *$\s+)*(?:^\| *width\=" *\d+\% *" *valign\=\"top\"(?: *align="left")?\| *$\s+)*^== *Desynthesis *Recipes? *\=\= *$\s+(.*?)(?:\s*(?:\&lt;br\&gt;)*)*\n(?:^\|\- *$\s+)*(?:^\| *width\=" *\d+\% *" *valign\=\"top\"(?: *align="left")?\| *$\s+)*^== *Obtained *[Ff]rom *Desynthesis *\=\= *$\s+(.*?)(?:\s*(?:\&lt;br\&gt;)*)*\n(?:^\|\- *$\s+)*(?:^\| *width\=" *\d+\% *" *valign\=\"top\"(?: *align="left")?\| *$\s+)*(?:^\|\} *$\s+?)*^== *How *[Tt]o *Obtain *\=\= *$</Find>
        <Replace>\n{|cellpadding="5" width="100%"\n|width="50%" valign="top"|\n==Statistics==\n$1\n|width="50%" valign="top"|\n==Other Uses==\n$2\n|-\n|width="50%" valign="top"|\n==Synthesis Recipes==\n$3\n|width="50%" valign="top"|\n==Used in Recipes==\n$4\n|-\n|width="50%" valign="top"|\n==Desynthesis Recipes==\n$5\n|width="50%" valign="top"|\n==Obtained from Desynthesis==\n$6\n|}\n==How to Obtain==</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline Singleline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *stats *= *\&lt;br\/?\&gt;([\[\{]+[\w ]+[\]\}]+)'''</Find>
        <Replace>| stats = &lt;br&gt;'''$1'''</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\| *stats *= *'{4,6}</Find>
        <Replace>| stats = '''</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\}\}\|width="50%" valign="top"\|\n\|width="50%" valign="top"\|</Find>
        <Replace>}}\n|width="50%" valign="top"|</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find> *\&lt; *br *\/? *\&gt;\s*\| *level</Find>
        <Replace>\n| level</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\[\[(?:Category|\w\w):.+?\]\])\s*(?:__NOTOC__)?\s*(\[\[File:)</Find>
        <Replace>$1__NOTOC__\n$2</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\[\[(?:Category|\w\w):.+?\]\])\s*(?:__NOTOC__)?\s*(\{\| *cell)</Find>
        <Replace>$1__NOTOC__\n{{Item Image|}}\n$2</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(\[\[(?:Category|\w\w):.+?\]\]) *\n+</Find>
        <Replace>$1\n</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\s*(\[\[(?:Category|\w\w):.+?\]\])</Find>
        <Replace>$1</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>^\s*(\{\|cell)</Find>
        <Replace>__NOTOC__\n{{Item Image|}}\n$1</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\[\[File:(\w+?)[ _]icon.jpg(?:\|.+?)?\]\]</Find>
        <Replace>{{Resist $1}}</Replace>
        <Comment>Resist</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>'*\{\{Resist[_ ](.+?)\}\}[' ]*([\-\+]\d+)</Find>
        <Replace>{{Resist|$1|$2}}</Replace>
        <Comment>Resist</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\[\[File:]]</Find>
        <Replace>{{Item Image|}}</Replace>
        <Comment>Item Image</Comment>
        <IsRegex>false</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\{\{Item Image\|([^}|]*?)\|(?:left|right|thumb|\d+ *x *\d+)\}\}</Find>
        <Replace>{{Item Image|$1}}</Replace>
        <Comment>Item Image</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>^(\[\[File:)</Find>
        <Replace>__NOTOC__\n$1</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\[\[Category:Weapons?\]\]((?:.*\n)+\{\{Weapon)</Find>
        <Replace>$1</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\[\[Category:(.+?)s?\]\]((?:.*\n)+\| *type *= *\1)</Find>
        <Replace>$2</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>([:' ]+Yield[:' ]+.+?)( *x *\d)''</Find>
        <Replace>$1''$2</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=^\|\})(?=.+?\n)</Find>
        <Replace>\n</Replace>
        <Comment>Whitespace</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=\=\=How to Obtain\=\=\n(?:.*?\n)*^\|-(?:[^\|^\n]*? )?) *align="left" *(?=.*?\n(?:^\| *.*?\|?\n)*?\|[\}\-])</Find>
        <Replace />
        <Comment>Table</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=\{\|.*?\n(?:(?!\|\}).*?\n)+(?!\|\}).*?)$</Find>
        <Replace>\n|}</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>[' \[]*\:Category\:Quests\|Used in Quest[s\]:' ]*\s*(?=\{\{Used In)</Find>
        <Replace />
        <Comment>Used In Quest</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=(?:\s|^)[\( ]*\?+[\) ]*)\{\{[Vv]erification\}\}</Find>
        <Replace>{{Information Needed}}</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;===How to Obtain==(?:.|\n)*?)[' ]*.*?Used [Ii]n [Qq]uests?[\]\:'\s]*?(?=[\*\:\[]*Trial)</Find>
        <Replace />
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>None</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=\{\{Item Image\|.*?\|)\|</Find>
        <Replace />
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=\=\=How to Obtain\=\=\s+(?:[^=]+?)*?)(?:\s|\&lt;br\&gt;)+(?=\=\=\=[^=\n]+?\=\=\=)</Find>
        <Replace>\n</Replace>
        <Comment>Whitespace</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=^\}\})(?=\|[^\|\n]+?\|$)</Find>
        <Replace>\n</Replace>
        <Comment>Whitespace</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>^\s*(?=\{\{Item Image)</Find>
        <Replace />
        <Comment>Whitespace</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>\{\{ *AH\|? *(?:Exclusive *[^}]*)? *\}\}</Find>
        <Replace>{{AH|Undeliverable Exclusive}}</Replace>
        <Comment>Undeliverable Ex</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>false</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>(?&lt;=\=\=How to Obtain\=\=)(\s+)(?!\{\{AH)</Find>
        <Replace>\n{{AH|Undeliverable Exclusive}}\n</Replace>
        <Comment>Undeliverable Ex</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>false</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>^\| *\|</Find>
        <Replace>|</Replace>
        <Comment>Table</Comment>
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>false</Minor>
        <BeforeOrAfter>true</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
      <Replacement>
        <Find>^===Historical (Information|Background)===$</Find>
        <Replace>==Historical Background==</Replace>
        <Comment />
        <IsRegex>true</IsRegex>
        <Enabled>true</Enabled>
        <Minor>true</Minor>
        <BeforeOrAfter>false</BeforeOrAfter>
        <RegularExpressionOptions>IgnoreCase Multiline</RegularExpressionOptions>
      </Replacement>
    </Replacements>
    <AdvancedReps>
      <IRule xsi:type="Rule">
        <enabled_>true</enabled_>
        <Children>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Remove excess categories</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>\[\[Category:(Rare|Exclusive|Augmented|Temporary)\]\]\s*(?=(?:.*?\n)*?.*?\{\{\1\}\})</replace_>
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
        </Children>
        <Name>Tags</Name>
        <ruletype_>OnWholePage</ruletype_>
        <replace_ />
        <with_ />
        <ifContains_ />
        <ifNotContains_ />
        <regex_>false</regex_>
        <ifIsRegex_>false</ifIsRegex_>
        <numoftimes_>1</numoftimes_>
        <ifRegexOptions_>None</ifRegexOptions_>
        <regexOptions_>None</regexOptions_>
      </IRule>
      <IRule xsi:type="Rule">
        <enabled_>true</enabled_>
        <Children>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Location</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=[\|\=](?:&amp;nbsp;| )*)\[\[([^\]\|]*?)\]\][', ]*(?:(?:at|around|near) +)?(?:([^\(]\w+?[^\)])'*|,? '*\((.*?)\)'*)? *\(?([A-Z]-\d+)\)?</replace_>
            <with_>{{Location|$1|map = $2$3|$4}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>false</enabled_>
            <Children />
            <Name>Specific Location</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(\{\{Location\|.*)\}\}(?:\&lt;br\&gt;|&amp;nbsp;|[ \:\*])*\n[\:' \(]*([^\|].*?)[\)' ]*\n</replace_>
            <with_>$1|$2}}\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Cleanup</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\{\{Location\|.*?\|)map = \|(?=.*?\}\})</replace_>
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
        </Children>
        <Name>Location</Name>
        <ruletype_>OnWholePage</ruletype_>
        <replace_ />
        <with_ />
        <ifContains_ />
        <ifNotContains_ />
        <regex_>false</regex_>
        <ifIsRegex_>false</ifIsRegex_>
        <numoftimes_>1</numoftimes_>
        <ifRegexOptions_>None</ifRegexOptions_>
        <regexOptions_>None</regexOptions_>
      </IRule>
      <IRule xsi:type="Rule">
        <enabled_>true</enabled_>
        <Children>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Delink gil</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\=\=How to Obtain\=\=\n(?:.*?\n)*\{\|.*?\n(?:.*?\n?)*?)\[\[gil\]\]</replace_>
            <with_>gil</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Combine broken lines</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=^\|(?:.+\|)?.*?\&lt;br\&gt; *)\n</replace_>
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>10</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>spacing padding</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(^\{\|.*?)(cellspacing="\d+")(.*?)(cellpadding="\d+")</replace_>
                <with_>$1$3 $4 $2</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>padding spacing</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(^\{\|.*?)(cellpadding="\d+")(.*?)(cellspacing="\d+")</replace_>
                <with_>$1$3 $2 $4</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
            </Children>
            <Name>Cellspacing/padding</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_ />
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>false</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove blank style element</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_> *style=""</replace_>
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
            </Children>
            <Name>Replace style background with bgcolor</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>style *= *" *(.*?)background(?:-color)?: *(#?\w+);? *(.*?) *"</replace_>
            <with_>BGCOLOR="$2" style="$1$3"</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Remove rowspan and colspan of 1</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\|-?(?:[^\|]*? )?) *(?:col|row)span *= *" *1 *" *</replace_>
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Remove spacing in header</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>^! *([^\|\n]*?) *\| *</replace_>
            <with_>!$1| </with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Remove excess bolding in header</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>^!(.*\| *)?'''(.*?)'''</replace_>
            <with_>!$1$2</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Apply class</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>\{\| *(.*?) *cellpadding="[234]" +cellspacing="[234]"(.*)(?=\s*(?:(?:^\|-.*)?^[\|!].*?BGCOLOR="#ffdead;?"|^\|- *BGCOLOR="#ffdead;?").*\s*(?:^[\|!:\*][^\}].*\s*)*?^\|\})</replace_>
            <with_>{|$1$2 class="ffxi-table"</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Use header markup</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\{\|.*?class="ffxi-table".*\s*(?:^[\|!].*\s*)*?)^\| *align="center" +BGCOLOR="#ffdead" +(.*?)\| *'''(.*?)'''(\s*)</replace_>
            <with_>!$1| $2$3</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Apply header class</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\{\|.*?class="ffxi-table".*\s*(?:^[\|!].*\s*)*?)^\|(.*?) *BGCOLOR="#ffdead;?" *(.*?)\|(?=.*\s*(?:^[\|!].*\s*)*?^\|\})</replace_>
            <with_>|class="ffxi-header" $1 $2|</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Replace blue bg</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\{\|.*?class="ffxi-table".*\s*(?:^[\|!:\*].*\s*)*?)^(\|-?.*?) *BGCOLOR="#(?:e3e6ff|d5d9ff);?"(?=.*\s*(?:^[\|!:\*].*\s*)*?^\|\})</replace_>
            <with_>$1</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Replace footer bg</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\{\|.*?class="ffxi-table".*\s*(?:^[\|!:\*].*\s*)*?)^(\|-?.*?) *BGCOLOR="#(?:ffdead);?"(?=.*\s*(?:^[\|!:\*].*\s*)^\|\})</replace_>
            <with_> class="ffxi-footer"</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Replace with class</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\{\|.*?class="ffxi-table".*\s*(?:^[\|!:\*].*\s*)*?)^((?:\|-?|!).*?) *BGCOLOR="#(?:ffdead);?"(?=.*\s*(?:^[\|!:\*].*\s*)+?^\|\})</replace_>
                <with_>$1 class="ffxi-header"</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove redundant class</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\{\|.*?class="ffxi-table".*\s*(?:^[\|!:\*].*\s*)*?^!.*?) *class="ffxi-header"</replace_>
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
            </Children>
            <Name>Replace header bg</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\{\|.*?class="ffxi-table".*\s*(?:^[\|!:\*].*\s*)*?)^(\|-?.*?) *BGCOLOR="#(?:ffdead);?"(?=.*\s*^!.*\s*(?:^[\|!:\*].*\s*)*?^\|\})</replace_>
            <with_>$1</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Replace nm bg</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\{\|.*?class="ffxi-table".*\s*(?:^[\|!:\*].*\s*)*?)^(\|-?.*?) *BGCOLOR="(?:#ffd9d9|mistyrose);?"(?=.*\s*(?:^\|(?:.*\|)? *''' *\[\[[^\[\n]*?\]\][^'\n]*'''.*\s*)(?:^[\|!:\*].*\s*)*?^\|\})</replace_>
            <with_>$1 class="bg-nm"</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Replace nm bg</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\{\|.*?class="ffxi-table".*\s*(?:^[\|!:\*].*\s*)*?)^\|-?(.*?) *BGCOLOR="#ffd9d9;?"(?=.*\s*(?:^\|(?:.*\|)? *''' *\[\[[^\[\n]*?\]\][^'\n]*'''.*\s*)(?:^[\|!:\*].*\s*)*?^\|\})</replace_>
                <with_>|- class="bg-nm"</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
            </Children>
            <Name>Replace red bg</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\{\|.*?class="ffxi-table".*\s*(?:^[\|!:\*].*\s*)*?)^(\|-?.*?) *BGCOLOR="#ffd9d9;?"(?=.*\s*(?:^[\|!:\*].*\s*)*?^\|\})</replace_>
            <with_>$1 class="bg-red"</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Remove excess rows</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(^\|-\s*){2,}</replace_>
            <with_>|-\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Apply wide-table class</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>\{\| *width="\d\d%" class="ffxi-table"</replace_>
            <with_>{|class="ffxi-table wide-table"</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
        </Children>
        <Name>Tables</Name>
        <ruletype_>OnWholePage</ruletype_>
        <replace_ />
        <with_ />
        <ifContains_ />
        <ifNotContains_ />
        <regex_>false</regex_>
        <ifIsRegex_>false</ifIsRegex_>
        <numoftimes_>1</numoftimes_>
        <ifRegexOptions_>None</ifRegexOptions_>
        <regexOptions_>None</regexOptions_>
      </IRule>
      <IRule xsi:type="Rule">
        <enabled_>true</enabled_>
        <Children>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Convert nc to regular</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\[\[Category:(Rare|Exclusive|Augmented|Temporary)\]\](?:.*?\n)*?.*?)\{\{\1(?:\|nc)?\}\}</replace_>
            <with_>{{$1}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>7</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
        </Children>
        <Name>Tags</Name>
        <ruletype_>OnWholePage</ruletype_>
        <replace_ />
        <with_ />
        <ifContains_ />
        <ifNotContains_ />
        <regex_>false</regex_>
        <ifIsRegex_>false</ifIsRegex_>
        <numoftimes_>1</numoftimes_>
        <ifRegexOptions_>None</ifRegexOptions_>
        <regexOptions_>None</regexOptions_>
      </IRule>
      <IRule xsi:type="Rule">
        <enabled_>true</enabled_>
        <Children>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Single Trial</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>[ '\*\:]*\[\[(?:(?:\:Category\:)?Trial of the Magians\|)?Trial of the Magians\]\][:' ]*(?:[\(\[]*\w+?(?: *Trials?)?[\)\]]*)?\[\[Trial ([^\]]+?)\]\][' ]*(?: *\((.*?)\))?(?:\&lt;br\&gt;|[ ])*\n(?=(?:.*?\n)*?==How *to *Obtain==)</replace_>
            <with_>{{Used In\n| trial = $1\n| trial descriptor = $2\n}}\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Multiple trials</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?:[' \[]*(?:(?:\:Category:)?Quests?\|)?Used *in *Quest[\]: ']*)?[ '\*\:]*\[\[(?:(?:\:Category\:)?Trial of the Magians\|)?Trial *of *the *Magians\]\][:' ]*(?:[\(\[]*\w[\w\t ]+?(?: *Trials?)?[\)\]]*)?\s*\n(?:[ \t\:\*]*(\[\[Trial .+?\]\](?:[ \t]*\(.*?\))?)[ \t]*\n)(?:[ \t\:\*]*(\[\[Trial .+?\]\](?:[ \t]*\(.*?\))?)[ \t]*\n)?(?:[ \t\:\*]*(\[\[Trial .+?\]\](?:[ \t]*\(.*?\))?)[ \t]*\n)?(?:[ \t\:\*]*(\[\[Trial .+?\]\](?:[ \t]*\(.*?\))?)[ \t]*\n)?(?:[ \t\:\*]*(\[\[Trial .+?\]\](?:[ \t]*\(.*?\))?)[ \t]*\n)?(?:[ \t\:\*]*(\[\[Trial .+?\]\](?:[ \t]*\(.*?\))?)[ \t]*\n)?(?:[ \t\:\*]*(\[\[Trial .+?\]\](?:[ \t]*\(.*?\))?)[ \t]*\n)?(?:[ \t\:\*]*(\[\[Trial .+?\]\](?:[ \t]*\(.*?\))?)[ \t]*\n)?(?:[ \t\:\*]*(\[\[Trial .+?\]\](?:[ \t]*\(.*?\))?)[ \t]*\n)?(?:[ \t\:\*]*(\[\[Trial .+?\]\](?:[ \t]*\(.*?\))?)[ \t]*\n)?(?=(?:.*?\n)*?==How *to *Obtain==)</replace_>
            <with_>{{Used In\n| trial = $1\n| trial 2 = $2\n| trial 3 = $3\n| trial 4 = $4\n| trial 5 = $5\n| trial 6 = $6\n| trial 7 = $7\n| trial 8 = $8\n| trial 9 = $9\n| trial 10 = $10\n}}\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Trial number and descriptor</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\| *trial *(\d+ *)?= *)\[\[Trial ([\d\?]+)\]\](?: *\((.*?)\))?</replace_>
            <with_>$2\n| trial $1descriptor = $3</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Trial descriptor</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\| *trial *(\d+ *)?= *[\d\?]+)\]\][ \t\-\:]*(.*?\[\[.*?)\n</replace_>
            <with_>\n| trial $1descriptor = $2]]\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Single quest</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>^[ ']*(?:\[\[[^\|\n]*?\|)?Used in Quest[s?\]:' ]*\[\[([^\]\n]+?)\]\][' ]*(?:\&lt;br\&gt;| )*\n(?=(?:.*?\n)*?^\=\=How +to +Obtain\=\=)</replace_>
            <with_>{{Used In\n| quest = $1\n}}\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Multiple quests</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>[ ']*\[\[(?:\:Category\:)?Quests?\|Used in Quests?\]\]s?[:' ]*\s*\n(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?=(?:.*?\n)*?==How *to *Obtain==)</replace_>
            <with_>{{Used In\n| quest = $1\n| quest 2 = $2\n| quest 3 = $3\n| quest 4 = $4\n| quest 5 = $5\n| quest 6 = $6\n| quest 7 = $7\n| quest 8 = $8\n| quest 9 = $9\n| quest 10 = $10\n}}\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Single mission</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>[ ']*\[\[(?:\:Category\:)?Missions?\|Used in Missions?\]\]s?[:' ]*\[\[([^\]]+?)\]\][' ]*\n(?=(?:.*?\n)*?==How *to *Obtain==)</replace_>
            <with_>{{Used In\n| mission = $1\n}}\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Multiple missions</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>[ ']*(?:\[\[(?:\:Category\:)?Missions?\|)?Used in Missions?(?:\]\])?s?[:' ]*\s*\n(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?=(?:.*?\n)*?==How *to *Obtain==)</replace_>
            <with_>{{Used In\n| mission = $1\n| mission 2 = $2\n| mission 3 = $3\n| mission 4 = $4\n| mission 5 = $5\n| mission 6 = $6\n| mission 7 = $7\n| mission 8 = $8\n| mission 9 = $9\n| mission 10 = $10\n}}\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Single campaign op</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>[ ']*\[\[(?:(?:\:Category\:)?Campaign Ops?\|)?(?:Used in )?Campaign Ops?\]\]s?[:' ]*\[\[([^\]]+?)\]\][' ]*\n(?=(?:.*?\n)*?==How *to *Obtain==)</replace_>
            <with_>{{Used In\n| campaign op = $1\n}}\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Multiple campaign ops</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>[ ']*\[\[(?:(?:\:Category\:)?Campaign Ops?\|)?(?:Used in )?Campaign Ops?\]\]s?[:' ]*\s*\n(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?:[ \t]*:*\*[ \t]*\[\[(.+?)\]\][ \t]*\n)?(?=(?:.*?\n)*?==How *to *Obtain==)</replace_>
            <with_>{{Used In\n| campaign op = $1\n| campaign op 2 = $2\n| campaign op 3 = $3\n| campaign op 4 = $4\n| campaign op 5 = $5\n| campaign op 6 = $6\n| campaign op 7 = $7\n| campaign op 8 = $8\n| campaign op 9 = $9\n| campaign op 10 = $10\n}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Display</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(\| *(quest|mission|campaign op)( *?\d*) *= *.+?)\|(.+?)\n</replace_>
            <with_>$1\n| $2$3 display = $4\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Relic weapon</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>^[ ']*(?:\[\[[^\|\n]*?\|)?Used in Quest[s?\]:' ]*\[\[.*?Relic Weapon.*?\]\][' ]*\[\[(.*?)\]\](?:\&lt;br\&gt;| )*\n</replace_>
            <with_>{{Used In\n| relic weapon = $1\n}}\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Relic weapon as quest</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>\| *quest *= *(?:\:Category\:)?Relic Weapons?\n\| *quest *display *= *(?:Relic .*?\: *)?(.+?)\n</replace_>
            <with_>| relic weapon = $1\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Blank Trial</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>\| *quest *= *(?:\:Category\:)?Trial of the Magians?\n</replace_>
            <with_>| trial = ???\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Clean empty</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>\| *(?:quest|mission|campaign op|trial) *\d* *(?:descriptor)? *= *\n</replace_>
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>false</enabled_>
            <Children />
            <Name>Campaign ops conversion</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>\| *quest( *\d? *= *(?:Materiel Storm|Desert Rain|Ward Warden))</replace_>
            <with_>| campaign op$1</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Guild Test Item</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>[' ]*\[\[.+?\|Guild Test Item\]\][:' ]*\[\[(.+?)\]\](?: *\((.+?)\))?</replace_>
            <with_>{{Used In\n| guild test item = $1\n| guild test rank = $2\n}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Forced Spawn</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>[' ]*\[\[.+?\|Used (?:to|in) Spawn\]\][:' ]*\[\[(.+?)\]\]</replace_>
            <with_>{{Used In\n| forced spawn = $1\n}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Freelance</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>[' ]*\[\[.+?\|Influences Freelance\]\][:' ]*\[\[(.+?)\]\]</replace_>
            <with_>{{Used In\n| influences freelance = $1\n}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Guild Points Value</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;===Other Uses==(?:.*?\n)*)^(\{\{Guild Points Value\|.*?\}\})(?=(?:.*?\n)*==How to Obtain==)</replace_>
            <with_>{{Used In\n| guild points value = $1\n}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>None</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\| *resale price *= *)\{\{Resale Price\|[Nn]o(?:ne)?\}\}</replace_>
                <with_>none</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
            </Children>
            <Name>Resale Price</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;===Other Uses==(?:.*?\n)*)^(\{\{Resale Price\|.*?\}\})(?=(?:.*?\n)*==How to Obtain==)</replace_>
            <with_>{{Used In\n| resale price = $1\n}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Guild Resale Price</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\=\=Other Uses\=\=(?:.*?\n)*)^(\{\{Guild Resale Price\|.*?\}\})(?=(?:.*?\n)*\=\=How to Obtain\=\=)</replace_>
            <with_>{{Used In\n| guild resale price = $1\n}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Not tradable</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>^\| *gobbie +mystery +box *= *(?:Not +trade?able +for +tally\.?|Cannot +be +traded +for(?: +daily)? +tally(?: +points)?\.?)</replace_>
                <with_>| gobbie mystery box = 0</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
            </Children>
            <Name>Mystery Box</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>^[ '\*\:]*\[\[(?:Gobbie Mystery Box\|)?[' ]*Gobbie Mystery Box[' ]*\]\][:' ]*([^&lt;&gt;\n]+)(?:\s*\&lt;br\&gt;\s*)*(?=(?:.*?\n)*?==How *to *Obtain==)</replace_>
            <with_>{{Used In\n| gobbie mystery box = $1\n}}\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Weapon Upgrade</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>^[' ]*\[\[.*?\]\][:' ]* \[\[Adventuring Fellow Guide(#.+)?\|Weapon Upgrade\]\]</replace_>
            <with_>{{Used In\n| adventuring fellow = weapon upgrade\n}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Remove extra spaces</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\{\{Used In(?:[^\}^\n].*\n|\n)*?\}\})(?:\&lt;br\&gt;|\n)+</replace_>
            <with_>\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Combine</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=^\{\{Used In\s*(?:\|.+\n)+?)^\}\}((?:.|\n)*)(?:^\{\{Used In\s*((?:^\|.+\n)+?^\}\}))</replace_>
            <with_>$2$1</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>30</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
        </Children>
        <Name>Used In</Name>
        <ruletype_>OnWholePage</ruletype_>
        <replace_ />
        <with_ />
        <ifContains_>(?:^\=\=How to Obtain\=\=|\=\=Other Uses\=\=)</ifContains_>
        <ifNotContains_ />
        <regex_>true</regex_>
        <ifIsRegex_>true</ifIsRegex_>
        <numoftimes_>1</numoftimes_>
        <ifRegexOptions_>IgnoreCase Multiline</ifRegexOptions_>
        <regexOptions_>IgnoreCase</regexOptions_>
      </IRule>
      <IRule xsi:type="Rule">
        <enabled_>true</enabled_>
        <Children>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Remove table indentation</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\=\=How to Obtain\=\=\s+(?:^.*\n)+?)^\s*: *(?=\{\|)</replace_>
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Regional</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>^\| *\[\[ *Regional Merchants? *\]\]\s+(?:\:?[' ]*\[\[(.+?)\|[' ]*\1(?: [Rr]egion)?[' ]*\]\][' ]*|[' ]*\([' ]*\[\[(.*?)\]\][' ]*\)[' ]*)\n</replace_>
                <with_>| {{Merchant|Regional|$1$2}}\n</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Standard</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>^\| *\[\[ *Standard Merchants? *\]\]</replace_>
                <with_>| {{Merchant|Standard}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Guild</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>^\| *\[\[(?:Guild Merchant(?:\|Guild Merchants)?(?:\|?([\w']+?) Guild)?|([\w']+?) Guild)\]\]</replace_>
                <with_>| {{Merchant|Guild|$1$2}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Conquest</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>\{\{Merchant\|Standard\}\}(?:\&lt;br\&gt;|&amp;nbsp;|[\s\:\*'])*(?:(.+?)n?(?: citizens?)?(?: only)?,? (?:\1 in )?(1st|2nd) place|(.+?) (?:[Cc]onquest\:? )?(?:1st */ *)?(2nd)\+?|(.+?) 1st or (2nd) in [Cc]onquest|Conquest[\: ]*(.+?) (1st|2nd))(?: *place *)?[\.' ]*(?=\n)</replace_>
                <with_>{{Merchant|Standard|nation = $1$3$5$7|conquest = $2$4$6$8}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Hours</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\{\{Merchant\|.+?)\}\}(?:\&lt;br\&gt;|\s)*\(?Open *([\d\:\- ]+)\)?</replace_>
                <with_>|hours = $1}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Holiday</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\{\{Merchant\|.+?)\}\}\s*Closed *(?:on)? *(\w+day)</replace_>
                <with_>|holiday = $1}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Restock</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\{\{Merchant\|.+?)\}\}[\s\:']*(?:Not (?:automatically )?restocked\.?)[\s']*</replace_>
                <with_>|restocked = false}}\n</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Guildworker's Union</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>^\| *\[\[ *Guildworker's Union *(?:\| *Guild\.? Union Rep\.?)? *\]\]</replace_>
                <with_>| {{Merchant|Guildworker's Union}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
            </Children>
            <Name>Merchant</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_ />
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>false</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Apply template</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>^\=\=\=Fishing\=\=\=\s*((?:^[;:\*].*?\n+)*)^\{\|.*?\s+(?:\|-.*?\s+)?\|.*?(?:Skill +)Cap[:' ]*(.*?)[' ]*\n(?:\|-.*?\s+^\|.*?Size[:' ]*(.*?)(?: *\(.*?\).*)?\s*\n)?^\|-.*?\s+^[!\|].*?Location.*?\s+^[!\|].*?Bait.*?\s+^[!\|].*?Rods.*?\s+^\|-.*?\s+^\|\s*((?:^[:*].*\n)+)^\|\s*((?:^[:*].*\n)+)^\|\s*((?:^[:*'].*|(?:\&lt;br\&gt;|&amp;nbsp;)+.*|\n)+)(?:^\|-.*?\s+^\|.*?colspan="3".*?\|.*Recommended.*\s+)?\|\}\s*(?:^(?:['\s:]|\&lt;nowiki\/\&gt;)*\*.*?Recommended.*\s*)?</replace_>
                <with_>===Fishing===\n$1{{Fishing\n| skill cap = $2\n| size = $3\n| location =\n$4\n| bait =\n$5\n| rods =\n$6\n}}\n</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove category</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>\[\[Category:Fishing\]\](?=(?:.*?\n)+\{\{Fishing)</replace_>
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Mark section too small</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=^\{\{Fishing\n(?:^[\|\*:]+.*\n+)*^\| *rods *=\s*(?:^[\*:].+\n+)*)((?:^[\*:].+\n+|(?:\&lt;br\&gt;|&amp;nbsp;|[:'\s]).*\n+)*?)((?:\&lt;br\&gt;|&amp;nbsp;|[:'\s])+(?:Fish +)?(?:Possibl[ey] +)?too +small:?['\s]*\n)^( *[\*:]+\[\[.+?\]\](?: *\* *])?)(?! *\{\{Fishing\|.*?\}\})\n</replace_>
                <with_>$3{{Fishing|Too small}}\n$1$2</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove blank too small</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=^\{\{Fishing\n(?:^[\|\*:]+.*\n+)*^\| *rods *=\s*(?:^\*.+\n+|(?:\&lt;br\&gt;|&amp;nbsp;|[:'\s]).*\n+)*?)((?:\&lt;br\&gt;|&amp;nbsp;|[:'\s])+(?:Fish +)?(?:Possibl[ey] +)?too +small:?['\s]*\n)(?!^ *[:\*]+.*)</replace_>
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Mark section breakable rods</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=^\{\{Fishing\n(?:^[\|\*:]+.*\n+)*^\| *rods *=\s*(?:^[\*:].+\n+)*)((?:^[\*:].+\n+|(?:\&lt;br\&gt;|&amp;nbsp;|[:'\s]).*\n+)*?)((?:\&lt;br\&gt;|&amp;nbsp;|[:'\s])+Will(?: +possibly)? +break:?['\s]*\n)^( *[\*:]+\[\[.+?\]\](?: *\* *])?)(?! *\{\{Fishing\|.*?\}\})\n</replace_>
                <with_>$3{{Fishing|May break}}\n$1$2</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove blank breakable</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=^\{\{Fishing\n(?:^[\|\*:]+.*\n+)*^\| *rods *=\s*(?:^\*.+\n+|(?:\&lt;br\&gt;|&amp;nbsp;|[:'\s]).*\n+)*?)((?:\&lt;br\&gt;|&amp;nbsp;|[:'\s])+Will(?: +possibly)? +break:?['\s]*\n)(?!^ *[:\*]+.*)</replace_>
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Mark recommended</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=^\{\{Fishing\n(?:^[\|\*:]+.*\n+)*?^\| *(?:rods|bait|location) *=\s*(?:^\*.+\n+|(?:\&lt;br\&gt;|&amp;nbsp;|[:'\s]).*\n+)*?^ *[\*:]+.*)\*</replace_>
                <with_>{{Fishing|Recommended}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Mark too small</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=^\{\{Fishing\n(?:^[\|\*:]+.*\n+)*?^\| *(?:rods|bait|location) *=\s*(?:^\*.+\n+|(?:\&lt;br\&gt;|&amp;nbsp;|[:'\s]).*\n+)*?^ *[\*:]+.*)[' ]*\(Too small\)[' ]*</replace_>
                <with_>{{Fishing|Too small}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
            </Children>
            <Name>Fishing Template</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_ />
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>false</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Sparks Template</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>\=\=\=Sparks +of +Eminence\=\=\=\s+^\{\|.*?\s+(?:^\|-.*?\s+)?^\|.*?Price[:' ]*(.*?) *\[*Sparks\]*.*?\s+(?:^[\|!].*?\s+)+?^\|\}(?:\&lt;br\&gt;|\s)*</replace_>
            <with_>===Sparks of Eminence===\n{{Sparks of Eminence|$1}}\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
        </Children>
        <Name>How to Obtain</Name>
        <ruletype_>OnWholePage</ruletype_>
        <replace_ />
        <with_ />
        <ifContains_>(?:\=\=How +to +Obtain\=\=)</ifContains_>
        <ifNotContains_ />
        <regex_>false</regex_>
        <ifIsRegex_>true</ifIsRegex_>
        <numoftimes_>1</numoftimes_>
        <ifRegexOptions_>IgnoreCase</ifRegexOptions_>
        <regexOptions_>IgnoreCase Multiline</regexOptions_>
      </IRule>
      <IRule xsi:type="Rule">
        <enabled_>false</enabled_>
        <Children>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Replace generic</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=^\| *)'''\[\[(.*?)\]\] *\(\[\[(?:(?:\:Category:)?Notorious Monsters?\|)?NM\]\]\)'''</replace_>
            <with_>{{NM|$1}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Replace specific</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=^\| *)'''\[\[(.*?)\]\] *\(\[\[(?:(?:\:Category:)?[^\]\n]*?Notorious Monsters?\|)?([A-Za-z]+NM)\]\]\)'''</replace_>
            <with_>{{NM|$1|$2}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
        </Children>
        <Name>NM Link</Name>
        <ruletype_>OnWholePage</ruletype_>
        <replace_ />
        <with_ />
        <ifContains_ />
        <ifNotContains_ />
        <regex_>false</regex_>
        <ifIsRegex_>false</ifIsRegex_>
        <numoftimes_>1</numoftimes_>
        <ifRegexOptions_>None</ifRegexOptions_>
        <regexOptions_>None</regexOptions_>
      </IRule>
      <IRule xsi:type="Rule">
        <enabled_>true</enabled_>
        <Children>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>None</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;===(?:Used in Recipes?|Obtained from Desynthesis)==)\n+\*?\'*None'*</replace_>
            <with_>\n*{{rl|None}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Absorb subcrafts</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(\*\{\{rl\|.+?)\}\}[, ']*\{\{Craft\|(.+?)\|\(?([\d\-~ \?]+?|\w+?)\)?\}\}[ ']*</replace_>
                <with_>$1|$2|$3}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>4</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Skill Cap at Synth Level</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=(\{\{rl\|.*?\|.*?\|)(.*?)(?:\||\}\})[\n.]*?)\1[Ss]kill *[Cc]ap *[Aa]t *[Ss]ynth *[Ll]evel</replace_>
                <with_>$1$2</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
            </Children>
            <Name>Recipe Link</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;===(?:Used in Recipes|Obtained from Desynthesis)==(?:.*\n+)+?)^ *\* *\[\[(.+)\|?.*?\]\] *-? *(?:\{\{Craft\||\[\[)(.+?)\|?(?:.*?\]\] )? *\(?([\d\?\- ]+?|[A-Z][a-z]+)\)?\}\}</replace_>
            <with_>*{{rl|$1|$2|$3}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
        </Children>
        <Name>Recipe Link</Name>
        <ruletype_>OnWholePage</ruletype_>
        <replace_ />
        <with_ />
        <ifContains_ />
        <ifNotContains_ />
        <regex_>false</regex_>
        <ifIsRegex_>false</ifIsRegex_>
        <numoftimes_>1</numoftimes_>
        <ifRegexOptions_>None</ifRegexOptions_>
        <regexOptions_>None</regexOptions_>
      </IRule>
      <IRule xsi:type="Rule">
        <enabled_>true</enabled_>
        <Children>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Fix quantity</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;===(?:Desynthesis Recipes?|Synthesis Recipes?)==\n(?:.*?\n)*)[\:\* ]*(\[\[[^\]]*\]\]) *x *(\d+)(?=(?:[^=].*\n)*?(?:==|\s*$))(?=(?:.*?\n)*==How to Obtain==)</replace_>
            <with_>:*$2 x $1</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Fix skill placement</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;===Synthesis Recipes==\n\{\{[Cc]raft\|[Ss]ynergy\|.*?\}\}.*?\n)((?:.|\n)*?)(^[\:\*\t ]*Skills[\:\t ]*.*?\n)</replace_>
            <with_>$2$1</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Fix yield</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=^[\:\*\t' ]*Yield[\:'\t ].*?\n)(?=\[\[.*?\]\]|''.*?'')</replace_>
            <with_>'''HQ 1:''' </with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Synthesis Recipes</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>^ *\{\{[Cc]raft\|(?&lt;craft&gt;[^\|^\n^\{^\}]+?)\|[ \(]*(?&lt;cap&gt;([\?\d\-\+~]+|\w+)(?:\{\{(?:[Vv]erification|[Qq]uestion|[Ii]nformation Needed)\}\})?)[ *\)]*\}\}(?:(?:[, ']*|\n[: ']*Skills[:' ]*)\{\{[Cc]raft\|(?&lt;subcraft&gt;[^\|^\n^\{^\}]+?)\|[ \(]*(?&lt;subcraftcap&gt;([\?\d\-\+~]+|\w+)(?:\{\{(?:[Vv]erification|[Qq]uestion|[Ii]nformation Needed)\}\})?)[ \)]*\}\}[ ']*)?(?:[, ']*\{\{[Cc]raft\|(?&lt;subcraft2&gt;[^\|^\n^\{^\}]+?)\|[ \(]*(?&lt;subcraft2cap&gt;([\?\d\-\+~]+|\w+)(?:\{\{(?:[Vv]erification|[Qq]uestion|[Ii]nformation Needed)\}\})?)[ \)]*\}\}[ ']*)?\n+(?:[:' ]*(?:Elemental *)?[Bb]alance[:' ]*(?&lt;balance&gt;.+)\n+)?[:' ]*(?:Yield|Result)[:' \[]*(?&lt;result&gt;.+?)(?:''|\]\])*(?: *x *(?&lt;yield&gt;[\d\?]+))? *\n(?:[:' ]*HQ *\d?[:' \[]*(?&lt;hqresult&gt;.+?)(?:''|\]\])*(?: *x *(?&lt;hqyield&gt;[\d\?]+))? *\n+)?(?:[:' ]*HQ *\d?[:' \[]*(?&lt;hq2result&gt;.+?)(?:''|\]\])*(?: *x *(?&lt;hq2yield&gt;[\d\?]+))? *\n+)?(?:[:' ]*HQ *\d?[:' \[]*(?&lt;hq3result&gt;.+?)(?:''|\]\])*(?: *x *(?&lt;hq3yield&gt;[\d\?]+))? *\n+)?(?:[:\{\* ']+(?&lt;crystal&gt;.+)\|[Cc]rystal\}\}[ ']*\n+)?([:' ]*(?:Elemental *)?[Bb]alance[\:' ]+(?&lt;balance&gt;.+)\n+)?(?:[:\{\* ]+Crafting Tool\|(?&lt;tool&gt;.+)\}\}[' ]*\n+)?(?:[\:\*' ]+(?&lt;ingredquant&gt;\d) *x[ \[']*(?&lt;ingred&gt;[^\]^\n]+?)[\]\t' ]*\n+)?(?:[:\*' ]+(?&lt;ingred2quant&gt;\d) *x[ \[']*(?&lt;ingred2&gt;[^\]^\n]+?)[\]\t' ]*\n+)?(?:[:\*' ]+(?&lt;ingred3quant&gt;\d) *x[ \[']*(?&lt;ingred3&gt;[^\]^\n]+?)[\]\t' ]*\n+)?(?:[:\*' ]+(?&lt;ingred4quant&gt;\d) *x[ \[']*(?&lt;ingred4&gt;[^\]^\n]+?)[\]\t' ]*\n+)?(?:[:\*' ]+(?&lt;ingred5quant&gt;\d) *x[ \[']*(?&lt;ingred5&gt;[^\]^\n]+?)[\]\t' ]*\n+)?(?:[:\*' ]+(?&lt;ingred6quant&gt;\d) *x[ \[']*(?&lt;ingred6&gt;[^\]^\n]+?)[\]\t' ]*\n+)?(?:[:\*' ]+(?&lt;ingred7quant&gt;\d) *x[ \[']*(?&lt;ingred7&gt;[^\]^\n]+?)[\]\t' ]*\n+)?(?:[:\*' ]+(?&lt;ingred8quant&gt;\d) *x[ \[']*(?&lt;ingred8&gt;[^\]^\n]+?)[\]\t' ]*\n+)?</replace_>
            <with_>{{Synthesis Recipe\n| craft = ${craft}\n| cap = ${cap}\n| subcraft = ${subcraft}\n| subcraft cap = ${subcraftcap}\n| subcraft 2 = ${subcraft2}\n| subcraft 2 cap = ${subcraft2cap}\n| result = ${result}\n| yield = ${yield}\n| hq result = ${hqresult}\n| hq yield = ${hqyield}\n| hq 2 result = ${hq2result}\n| hq 2 yield = ${hq2yield}\n| hq 3 result = ${hq3result}\n| hq 3 yield = ${hq3yield}\n| crystal = ${crystal}\n| balance = ${balance}\n| crafting tool = ${tool}\n| ingredient = ${ingred}\n| ingredient quantity = ${ingredquant}\n| ingredient 2 = ${ingred2}\n| ingredient 2 quantity = ${ingred2quant}\n| ingredient 3 = ${ingred3}\n| ingredient 3 quantity = ${ingred3quant}\n| ingredient 4 = ${ingred4}\n| ingredient 4 quantity = ${ingred4quant}\n| ingredient 5 = ${ingred5}\n| ingredient 5 quantity = ${ingred5quant}\n| ingredient 6 = ${ingred6}\n| ingredient 6 quantity = ${ingred6quant}\n| ingredient 7 = ${ingred7}\n| ingredient 7 quantity = ${ingred7quant}\n| ingredient 8 = ${ingred8}\n| ingredient 8 quantity = ${ingred8quant}\n}}\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Remove crystal if balance</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\{\{Synthesis Recipe\n(?:[^\n]*\n)*)^\| *crystal *= *\n(?=(.*\n)*^\| *balance *= *)</replace_>
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove blank</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\{\{Synthesis Recipe\n(?:[^\n]*\n)*)^\| balance = \n</replace_>
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Fire</Name>
                    <ruletype_>OnWholePage</ruletype_>
                    <replace_>(?&lt;=\{\{Synthesis Recipe\n(?:[^\n]*\n)*)^\| *Fire *= *</replace_>
                    <with_>| fire = </with_>
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>Multiline</regexOptions_>
                  </IRule>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Earth</Name>
                    <ruletype_>OnWholePage</ruletype_>
                    <replace_>(?&lt;=\{\{Synthesis Recipe\n(?:[^\n]*\n)*)^\| *Earth *= *</replace_>
                    <with_>| earth = </with_>
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>Multiline</regexOptions_>
                  </IRule>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Water</Name>
                    <ruletype_>OnWholePage</ruletype_>
                    <replace_>(?&lt;=\{\{Synthesis Recipe\n(?:[^\n]*\n)*)^\| *Water *= *</replace_>
                    <with_>| water = </with_>
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>Multiline</regexOptions_>
                  </IRule>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Wind</Name>
                    <ruletype_>OnWholePage</ruletype_>
                    <replace_>(?&lt;=\{\{Synthesis Recipe\n(?:[^\n]*\n)*)^\| *Wind *= *</replace_>
                    <with_>| wind = </with_>
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>Multiline</regexOptions_>
                  </IRule>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Ice</Name>
                    <ruletype_>OnWholePage</ruletype_>
                    <replace_>(?&lt;=\{\{Synthesis Recipe\n(?:[^\n]*\n)*)^\| *Ice *= *</replace_>
                    <with_>| ice = </with_>
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>Multiline</regexOptions_>
                  </IRule>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Lightning</Name>
                    <ruletype_>OnWholePage</ruletype_>
                    <replace_>(?&lt;=\{\{Synthesis Recipe\n(?:[^\n]*\n)*)^\| *Lightning *= *</replace_>
                    <with_>| lightning = </with_>
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>Multiline</regexOptions_>
                  </IRule>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Light</Name>
                    <ruletype_>OnWholePage</ruletype_>
                    <replace_>(?&lt;=\{\{Synthesis Recipe\n(?:[^\n]*\n)*)^\| *Light *= *</replace_>
                    <with_>| light = </with_>
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>Multiline</regexOptions_>
                  </IRule>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Dark</Name>
                    <ruletype_>OnWholePage</ruletype_>
                    <replace_>(?&lt;=\{\{Synthesis Recipe\n(?:[^\n]*\n)*)^\| *Dark *= *</replace_>
                    <with_>| dark = </with_>
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>Multiline</regexOptions_>
                  </IRule>
                </Children>
                <Name>Lowercase</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_ />
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
            </Children>
            <Name>Balance</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\{\{Synthesis Recipe\n(?:.*\n)*?^\| *balance *= *.*?)\{\{(?:[Rr]esist |[Ee]lement *\| *)(.+?)\}\} *(\d+|\{\{(?:[Vv]erification|[Qq]uestion|[Ii]nformation Needed)\}\})</replace_>
            <with_>\n| $1 = $2</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove duplicate hq 3 yield</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\| *hq 2 yield *= *(\d+) *\n(?:\|.*?\n)*)\| *hq 3 yield *= *\1 *\n</replace_>
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove duplicate hq 2 yield</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\| *hq yield *= *(\d+) *\n(?:\|.*?\n)*)\| *hq 2 yield *= *\1 *\n</replace_>
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove duplicate hq yield</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\| *yield *= *(\d+) *\n(?:\|.*?\n)*)\| *hq yield *= *\1 *\n</replace_>
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove single quantity/yield</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>\| *(?:ingredient *\d? *(?:quantity)?|yield) *=[' ]*1[ ']*\n</replace_>
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
            </Children>
            <Name>Remove blank lines</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>\| *(?:(?:hq)? *\d? *(?:yield|result)|ingredient *\d? *(?:quantity)?|crafting tool) *=[' ]*\n</replace_>
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Remove blank cap</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>\| *(?:subcraft)? *\d? *(?:cap)? *= *\n</replace_>
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Remove redundant results</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(\| *(?:hq *\d? *)?result * = *(.+?))\n((?:[^\}]*\n)+?)?\| *hq *\d? *result *= *\2 *\n</replace_>
            <with_>$1\n$3</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>3</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Remove needless categories</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>\[\[[Cc]ategory:(.+?)s?\]\]((?:.*\n)+?\| *(?:sub)?craft *\d? *= *\1)</replace_>
            <with_>$2</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>3</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Table</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;===(?:Desynthesis Recipes?|Synthesis Recipes?)\=\=)\n+(?:\{\| *.+?\n)</replace_>
            <with_>\n{|width="100%"\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>None</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;===(?:Desynthesis Recipes?|Synthesis Recipes?)==)\n+\*?\'*None'*</replace_>
            <with_>\n{{Synthesis Recipe|None}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Spacing</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(\{\{Synthesis Recipe(?:.*\n)*?\}\})\n+(?=\{\{Synthesis Recipe(?:.*\n)*?\}\})</replace_>
            <with_>$1\n&lt;br&gt;\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Apply template</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\=\=(?:De)?Synthesis Recipes\=\=)\s+^\{\|.*?\s+(?:^\|-.*?\s+)?^\|.*?\s+(?:^(\{\{Synthesis Recipe\s+(?:^\|.*\s+)*?\}\})(?:^\|.*?|\&lt;br\&gt;|\s)*?)?(?:^(\{\{Synthesis Recipe\s+(?:^\|.*\s+)*?\}\})(?:^\|.*?|\&lt;br\&gt;|\s)*?)?(?:^(\{\{Synthesis Recipe\s+(?:^\|.*\s+)*?\}\})(?:^\|.*?|\&lt;br\&gt;|\s)*?)?(?:^(\{\{Synthesis Recipe\s+(?:^\|.*\s+)*?\}\})(?:^\|.*?|\&lt;br\&gt;|\s)*?)?(?:^(\{\{Synthesis Recipe\s+(?:^\|.*\s+)*?\}\})(?:^\|.*?|\&lt;br\&gt;|\s)*?)?(?:^(\{\{Synthesis Recipe\s+(?:^\|.*\s+)*?\}\})(?:^\|.*?|\&lt;br\&gt;|\s)*?)?(?:^(\{\{Synthesis Recipe\s+(?:^\|.*\s+)*?\}\})(?:^\|.*?|\&lt;br\&gt;|\s)*?)?(?:^(\{\{Synthesis Recipe\s+(?:^\|.*\s+)*?\}\})(?:^\|.*?|\&lt;br\&gt;|\s)*?)?^\|\}</replace_>
            <with_>\n{{Synthesis Recipes\n| recipe 1 =\n$1\n| recipe 2 =\n$2\n| recipe 3 =\n$3\n| recipe 4 =\n$4\n| recipe 5 =\n$5\n| recipe 6 =\n$6\n| recipe 7 =\n$7\n| recipe 8 =\n$8\n}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
        </Children>
        <Name>Synthesis Recipes</Name>
        <ruletype_>OnWholePage</ruletype_>
        <replace_ />
        <with_ />
        <ifContains_ />
        <ifNotContains_ />
        <regex_>false</regex_>
        <ifIsRegex_>false</ifIsRegex_>
        <numoftimes_>1</numoftimes_>
        <ifRegexOptions_>None</ifRegexOptions_>
        <regexOptions_>None</regexOptions_>
      </IRule>
      <IRule xsi:type="Rule">
        <enabled_>true</enabled_>
        <Children>
          <IRule xsi:type="Rule">
            <enabled_>false</enabled_>
            <Children />
            <Name>Convert legacy format</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>[' ]*Description[\:' ]*(.+)\n</replace_>
            <with_>'''%%pagename%%'''&lt;br&gt;\n''$1''\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>false</enabled_>
            <Children />
            <Name>Ammo</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(\[\[[Cc]ategory\:)([Aa]mmunition)(\]\](?:.*\n)+[' ]*)(All Races[' ]*)</replace_>
            <with_>$1$2$3([[:Category:$2|$2]]) $4</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Jugs</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\=\=Statistics\=\=\s*(?:.+\n)+?[' ]*)(All Races[' ]*(.+\n)+?[' ]*Calls \[*[\w ]+(?:\|[\w ]+)?\.?[' ]*)</replace_>
            <with_>([[:Category:Pet Items|Pet Item]]) $1</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Fix Shields</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>\{\{Weapon(\s+(?:^\|.*\n)+^\| *)type( *= *Shield)</replace_>
            <with_>{{Armor$1slot$2</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Apply template</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\=\=Statistics\=\=\s+)^['\[ ]*(?:\{\{PAGENAME\}\}|([\w\d'" \+\-\.\&amp;\(\)]+?))['\] ]*((?:\{\{(?:Rare|Exclusive|Aug(?:ment(?:ed)?)?)\}\})+)?[ ']*(?:\&lt;br *\/?\&gt;)+[' ]*\n*.+?([Hh]ead|[Nn]eck|[Ee]ar|[Bb]ody|[Hh]ands|[Rr]ing|[Bb]ack|[Ww]aist|[Ll]egs|[Ff]eet|[Ss]hield)s?\]\].+?([Aa]ll (?:[Rr]aces|\&amp;.*?;)|[HhMmEeTtGg])[' ]*(?:\&lt;br *\/?\&gt;)+\s*?((?:.+\n+)+)?[' ]*Lv\.[' ]*(\d+) *((?:['\[\]\|\w \/]+(?:\&lt;br *\/?\&gt;|\n)\n?)+)</replace_>
                <with_>{{Armor\n| name = $1&lt;!--!!!!Marked for Bot!!!!--&gt;\n| tags = $2\n| slot = $3\n| races = $4\n| stats = $5\n| level = $6\n| jobs = $7\n}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove armor category</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>\[\[Category:Armor\]\]((?:.*?\n)+\{\{Armor\s*\n)</replace_>
                <with_>$1</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove slot category</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>\[\[Category:(.+)s?\]\]((?:.*?\n)+\{\{Armor\s*\n(?:.*?\n)*\| *slot *= *\1)</replace_>
                <with_>$2</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Earrings</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>\[\[[Cc]ategory:[Ee]arrings\]\]((?:.*?\n)+\{\{[Aa]rmor\s*\n(?:.*?\n)*\| *slot *= *)(?:[Ee]ar|ring)</replace_>
                <with_>$1Ear</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Set</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(^\{\{Armor\s+(?:^\|.+|\n)+)(^\}\}(?:[':\*].*|\&lt;br\&gt;|\s)*?)\{\{Equipment Set\|([^\|]+?)\}\}</replace_>
                <with_>$1| set = $3\n$2</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Shield</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(^\{\{Armor\s+(?:^\|.+|\n)+)(^\}\}(?:[':\*].*|\&lt;br\&gt;|\s)*?)\{\{(\w+?) Shield\}\}</replace_>
                <with_>$1| shield type = $3\n$2</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
            </Children>
            <Name>Armor Template</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_ />
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>true</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>IgnoreCase</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Apply template</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\=\=Statistics\=\=\s+)^[' ]*([\w\d'" \+\-\.\&amp;\(\)]+?)[' ]*((?:\{\{(?:[Rr]are|[Ee]xclusive|[Aa]ug)\}\})+)?[' ]*\&lt;br *\/?\&gt; *\n.+?(Sword|Dagger|Axe|Great Axe|Great Sword|Katana|Great Katana|Polearm|Staff|Club|Scythes?|Hand-to-Hand|Throwing|Marksmanship|Archery|(?:Wind|String) Instr\.|Grips?|Ammunition|Ammo|Pet Items?|Fishing Tackle)\]\].+?All Races[' ]*\&lt;br *\/?\&gt;\n(?:[ '\[]+(?:DMG|Damage\|DMG)[\]\:' ]+([\+\d]+)[' \[]*Delay[\]\:' ]+([\+\d ]+))?\s*((?:.+\n)+?)(?: *'{0,3} *Lv\.[' ]*(\d+) *((?:['\[\]\|\w \/]+(?:\&lt;br *\/?\&gt;|\n)\n?)+)|(?:\s*\&lt;br\&gt;\s*){2})?</replace_>
                <with_>{{Weapon\n| name = $1&lt;!--!!!!Marked for Bot!!!!--&gt;\n| tags = $2\n| type = $3\n| damage = $4\n| delay = $5\n| stats = $6\n| level = $7\n| jobs = $8\n}}\n</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
            </Children>
            <Name>Weapon Template</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_ />
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>true</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>IgnoreCase</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Apply template</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>^[' ]*([\w\d'" \+\-\.\&amp;\(\)]+?)['\: ]*((?:\{\{(?:[Rr]are|[Ee]xclusive|[Aa]ug(?:ment)?|[Tt]emp(?:orary)?)\}\})+)?\&lt;br *\/?\&gt; *\n((?:^ *''[^'].+(?:(?:\&lt;br *\/?\&gt;)?\n))+?)(?:\&lt;br *\/?\&gt;|\n)*(?:[' ]*(?:Stack(?:able)?[\:' ]+)?(\d+|[Nn]o|[Nn]ot *[Ss]tackable|\{\{(?:[Ii]nformation(?: [Nn]eeded)?|[Qq]uestion)\}\})?[' \.]*(?:(?:\&lt;br *\/?\&gt;)*\n)+)?[' ]*Food *(?:[Ee]ffects?|[Dd]uration)?[\:' ]+(?:\((?:[Dd]uration[\: ]*)?((?:\{\{(?:[Ii]nformation(?: [Nn]eeded)?|[Qq]uestion)\}\}|[\d\?]+) *\w+|\&lt;?[Dd]uration\&gt;?)(?:, *(.+))?\))?( *\{\{.*\}\})?(?:\&lt;br *\/?\&gt;|[\s'])*\n((?:[\*\:]+.+\n)+)?</replace_>
                <with_>{{Food\n| name = $1&lt;!--!!!!Marked for Bot!!!!--&gt;\n| tags = $2\n| description = $3\n| stackable = $4\n| duration = $5$7\n| races = $6\n| effects =\n$8}}\n</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Set type</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(\{\{Food\n.+)^\| *races *\= *\[*[Mm]ithra\]*(?: *[Oo]nly)? *(?:\[*(?:[\w\#\- ]+\|)?\*\]*)?</replace_>
                <with_>$1| type = raw fish</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline Singleline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Set type</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(\{\{Food\n.+)^\| *races *\= *\[*[Gg]alka\]*(?: *[Oo]nly)? *(?:\[*(?:[\w\#\- ]+\|)?\*\]*)?</replace_>
                <with_>$1| type = raw meat</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline Singleline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove food category</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>\[\[[Cc]ategory:[Ff]ood\]\]((?:.*?\n)+\{\{[Ff]ood\s*\n)</replace_>
                <with_>$1</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
            </Children>
            <Name>Food Template</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_ />
            <with_ />
            <ifContains_>(?:\[\[Category:Food\]\]|\{\{Food\n)</ifContains_>
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>true</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>IgnoreCase</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Apply template</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>^[' ]*([\w\d'" \+\-\.\&amp;\(\)]+?)['\: ]*((?:\{\{(?:[Rr]are|[Ee]xclusive|[Aa]ug(?:ment)?|[Tt]emp(?:orary)?)\}\})+)?\&lt;br *\/?\&gt; *\n((?:^ *''[^'].+(?:(?:\&lt;br *\/?\&gt;)?\n))+?)(?:\&lt;br *\/?\&gt;|\n)*(?:[' ]*(?:Stack(?:able)?[\:' ]+)?(\d+|[Nn]o|[Nn]ot *[Ss]tackable|\{\{(?:[Ii]nformation(?: [Nn]eeded)?|[Qq]uestion)\}\})?[' \.]*(?:(?:\&lt;br *\/?\&gt;)*\n)+)?[' ]*Medicine *(?:[Ee]ffects?|[Dd]uration)?[\:' ]+(?:\((?:[Dd]uration[\: ]*)?((?:\{\{(?:[Ii]nformation(?: [Nn]eeded)?|[Qq]uestion)\}\}|[\d\?]+) *\w+|\&lt;?[Dd]uration\&gt;?)(?:, *(.+))?\))?( *\{\{.*\}\})?(?:\&lt;br *\/?\&gt;|[\s'])*\n((?:[\*\:]+.+\n)+)?</replace_>
                <with_>{{Medicine\n| name = $1&lt;!--!!!!Marked for Bot!!!!--&gt;\n| tags = $2\n| description = $3\n| stackable = $4\n| duration = $5$7\n| effects =\n$8}}\n</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove category</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>\[\[Category:Medicine\]\]((?:.*?\n)+\{\{Medicine\s*\n)</replace_>
                <with_>$1</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
            </Children>
            <Name>Medicine Template</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_ />
            <with_ />
            <ifContains_>(?:\[\[Category:Food\]\]|\{\{Food\n|\{\{AH\|Medicines\}\})</ifContains_>
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>true</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>IgnoreCase</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Format description</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>^('')([^'\n].+[^'\n])(?:\1)? *((?:\&lt;br\&gt;)*)\s*^\1(?=[^'])</replace_>
                <with_>''$2$3</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>10</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Apply template</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\=\=Statistics\=\=)\s*'''(.*?)'''( *(?:\{\{.*?\}\})+)?(?: *\&lt;br\&gt;)?\s*''([^'\n].+[^'\n])''\s*(?:(?:\&lt;br\&gt;\s*)*'''Stackable[': ]*([\w\d ]+)'*(?:\s*\&lt;br\&gt;\s*)*)?</replace_>
                <with_>\n{{Item Statistics\n| name = $1\n| tags = $2\n| description = $3\n| stackable = $4\n}}\n</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Fix type</Name>
                    <ruletype_>InsideTemplate</ruletype_>
                    <replace_>(?&lt;=^\{\{Item Statistics\s*(?:^\|.*\s)*?)^\| *type *= *Materials(?=\s*(?:^\|.*\s)*?^\}\})</replace_>
                    <with_>| type = Material</with_>
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>IgnoreCase Multiline</regexOptions_>
                  </IRule>
                </Children>
                <Name>Set type</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>\[\[Category:(Materials|Quest Item)\]\]((?:.*\s)+?^\{\{Item Statistics\s*(?:^\|.*\s)+)(?=^\}\})</replace_>
                <with_>$2| type = $1\n</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase Multiline</regexOptions_>
              </IRule>
            </Children>
            <Name>Item Statistics Template</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_ />
            <with_ />
            <ifContains_ />
            <ifNotContains_>(\{\{|\[\[Category:)(Food|Armor|Weapon|Furnishing)(\]\])?</ifNotContains_>
            <regex_>false</regex_>
            <ifIsRegex_>true</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>IgnoreCase</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Storage slip</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>[ ']*(?:Can +be +)?(?:storable|stored|held +in +storage +)?with +\[\[Storage +Slip +(\d+)\]\][\.']*</replace_>
                <with_>{{Storable|Storage Slip|$1}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
            </Children>
            <Name>Storage</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_ />
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>false</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>false</enabled_>
                <Children>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Remove bold</Name>
                    <ruletype_>OnWholePage</ruletype_>
                    <replace_>(\| *jobs *=.+?)'+</replace_>
                    <with_>$1</with_>
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>40</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>Singleline</regexOptions_>
                  </IRule>
                </Children>
                <Name>Compress jobs</Name>
                <ruletype_>InsideTemplate</ruletype_>
                <replace_>\| jobs = [' ]*([\[\]\|\w \/]+)[' ]*(\&lt;br\/?\&gt;)?[' ]*\n?[' ]*([\[\]\|\w \/]+)[' ]*(\&lt;br\/?\&gt;)?[' ]*\n?[' ]*([\[\]\|\w \/]+)[' ]*(\&lt;br\/?\&gt;)?[' ]*\n</replace_>
                <with_>| jobs = $1$2$3$4$5$6\n</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>true</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Remove newlines</Name>
                    <ruletype_>InsideTemplate</ruletype_>
                    <replace_>\| *(stats|description|jobs)[\= ]+(.+)\n((?:[^\|].*\n+)+\| *\w+[\= ]*)</replace_>
                    <with_>| $1 = $2$3</with_>
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>true</ifIsRegex_>
                    <numoftimes_>5</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>None</regexOptions_>
                  </IRule>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Separate stats and level</Name>
                    <ruletype_>InsideTemplate</ruletype_>
                    <replace_>(?&lt;=\| *stats *= *[^\n]+?)(?: *|\&lt;br\/?\&gt;)*(\| *level *=)</replace_>
                    <with_>\n$1</with_>
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>None</regexOptions_>
                  </IRule>
                </Children>
                <Name>Compress stats/desc</Name>
                <ruletype_>InsideTemplate</ruletype_>
                <replace_>\| *(stats|description) *= *(.+(?:\&lt;br\/?\&gt;)+)\n(?=(?:[^\|].+(?:\&lt;br\/?\&gt;)+\n)*\| *[\w ]+\= *)</replace_>
                <with_>| $1 = $2</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>true</ifIsRegex_>
                <numoftimes_>4</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>false</enabled_>
                <Children />
                <Name>Remove italics in description</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(\| *description *(?:= *.*?[^']|=))('')([^'^\n]+?)\2</replace_>
                <with_>$1$3</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove newlines</Name>
                <ruletype_>InsideTemplate</ruletype_>
                <replace_>(?&lt;=^\| *(?:stats|description|jobs) *= *(?:(?:[^\}].*)?\n)*?.*?)\n(?!^(?:\| *[\w ]+ *= *|\}\})|\*)(?=(?:.*\n)*?^\}\})</replace_>
                <with_> </with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>true</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Fix field end breaks</Name>
                <ruletype_>InsideTemplate</ruletype_>
                <replace_>(\| *(?:stats|jobs|description) *\= *.*?)(?:\&lt;br\/?\&gt;|\n)+(^\}\}|^\|[ \w]+ *\= *)</replace_>
                <with_>$1\n$2</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>true</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Remove DPS template</Name>
                    <ruletype_>OnWholePage</ruletype_>
                    <replace_>^ *\{\{\s*DPS\s*\|\d+\s*\|\d+\s*\}\}</replace_>
                    <with_ />
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>Multiline</regexOptions_>
                  </IRule>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Remove stray TP</Name>
                    <ruletype_>OnWholePage</ruletype_>
                    <replace_>^(?:[\n(?:\&lt;br\/?\&gt;) ']+TP [Pp]er [Hh]it[\:' \+\d\.\%\?]+)</replace_>
                    <with_ />
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>None</regexOptions_>
                  </IRule>
                </Children>
                <Name>Remove DPS / TP</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?:\{\{DPS\|\d+\s*\|\d+\s*\}\}|[\n(?:\&lt;br\/?\&gt;) ']+[Dd]amage *[Pp]er *[Ss]econd[\:' \d\.\?\+\w\-]+(?:\&lt;br\/?\&gt;)*\s*?)(?:[(?:\&lt;br\/?\&gt;)\s']+TP [Pp]er [Hh]it[\:' \+\d\.\%\?]+)</replace_>
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Enchantment</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(\{\{(?:Armor|Weapon).+)\n?\}\}\n*\:*\{\{EnchantmentDetails\|(\d+)\|([\d\:]+)\|([\d\:]+)\}\}\s*</replace_>
                <with_>$1\n| charges = $2\n| use delay = $3\n| recast = $4\n}}\n</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>true</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Singleline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Clean stackable</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>^\}\}\n\| stackable</replace_>
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Spacing after end of equipment</Name>
                    <ruletype_>OnWholePage</ruletype_>
                    <replace_>(?&lt;=\{\{(?:Armor|Weapon)\n.+?\| *(?:level|jobs|stats) *= *[^\n]+[\d'\}\]])(?:\&lt;br\/?\&gt;|\n)*(\}\})\n*(?=[^\n])</replace_>
                    <with_>\n$1\n</with_>
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>None</regexOptions_>
                  </IRule>
                </Children>
                <Name>Spacing after equipment line</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\{\{(?:Armor|Weapon)\n.+?\| *(?:level|jobs|stats) *= *[^\n]+?[\d'\]\}])(?:\n|\&lt;br\/?\&gt;){2,}\|\s*(?=[^\n])</replace_>
                <with_>\n|</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>true</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Singleline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Stackable</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\{\{(?:Armor|Weapon|Item Statistics)\n.+?\| *(?:level|jobs|stats|description) *= *[^\n]+\n*)\}\}(.*?)[' \n(?:\&lt;br\/?\&gt;)]*Stackable[\:' ]*(\d+|Not Stackable)[' ]*</replace_>
                <with_>| stackable = $2\n}}\n$1</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline Singleline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Stats to description</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>\| *stats *= *('')([^'][^\1]+?)\1</replace_>
                <with_>| description = $2</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Evolith</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>\}\}(?:\&lt; *br *\/? *\&gt;|[ \n])*'*Evolith *(?:[Aa]pertures|[Ss]lots)?:?'*\n.+?\[(\d)\].+?(\{\{Evolith.+?\}\}[ \d]*).+\n</replace_>
                <with_>| evolith $1 = $2\n}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Reduce trailing breaks</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\{\{(?:Armor|Weapon|Food)\n.+?\| *(?:level|jobs) *= *[^\n]+\n\}\})(?:\&lt;br\/?\&gt;\n?){2,4}</replace_>
                <with_>\n&lt;br&gt;</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>true</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Singleline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Remove excess breaks</Name>
                    <ruletype_>OnWholePage</ruletype_>
                    <replace_>(?&lt;=\{\{(?:Armor|Weapon)\n.+?\| *[a-zA-Z]+ *= *[^\n]+\n*\}\}\n*)(?:\&lt;br\/?\&gt;)+</replace_>
                    <with_>&lt;br&gt;</with_>
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>Singleline</regexOptions_>
                  </IRule>
                  <IRule xsi:type="Rule">
                    <enabled_>true</enabled_>
                    <Children />
                    <Name>Remove unneccessary breaks</Name>
                    <ruletype_>OnWholePage</ruletype_>
                    <replace_>(?&lt;=\{\{(?:Armor|Weapon)\n.+?\| *[a-zA-Z]+ *= *[^\n]+\n*\}\}\n)(?:\&lt;br\/?\&gt;|\n)+(?=\|width=)</replace_>
                    <with_ />
                    <ifContains_ />
                    <ifNotContains_ />
                    <regex_>true</regex_>
                    <ifIsRegex_>false</ifIsRegex_>
                    <numoftimes_>1</numoftimes_>
                    <ifRegexOptions_>None</ifRegexOptions_>
                    <regexOptions_>Singleline</regexOptions_>
                  </IRule>
                </Children>
                <Name>Remove excess spacing</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\{\{(?:Armor|Weapon)\n.+?\| *[a-zA-Z]+ *= *[^\n]+\n*\}\}\n)\s+</replace_>
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Singleline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Spacing after consumables</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(\{\{(?:Food|Medicine)\n.+?\| *effects *= *\n(?:[\*\:]+[^\n]+\n)+\}\})([^\n])</replace_>
                <with_>$1\n$2</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Singleline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Replace instruments</Name>
                <ruletype_>InsideTemplate</ruletype_>
                <replace_>^(\| *type[ \=]*\w+) *Instr\.</replace_>
                <with_>$1 Instrument</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Item Level</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?:\&lt; *br *\/? *\&gt;)*(\n\}\}\n)?:*&lt;?'*\[*[Ii]tem [Ll]evel\]*\:?'* *(\d+)&gt;?</replace_>
                <with_>\n| ilevel = $2$1</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Alternate DPS</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\{\{Weapon\n(?:[^\}].*\n|\n)+)\}\}\s*(?:\&lt;br[\/ ]*\&gt;\s*)*[\s']*[Dd]amage [Pp]er [Ss]econd:[ ']*[\d\.]+ *\/ *([\d\.]+)</replace_>
                <with_>| alternate dps = $1\n}}\n</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Image</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>\[\[File:(.+\.[A-Za-z]{3})[ \t]*(?:\|[ \t]*([\w ']+)[ \t]*)?(?:\|[ \t]*(?:thumb|right)[ \t]*)?(?:\|[ \t]*(\d+px)[ \t]*)?.+?\]\]\n(\{\{(?:[Aa]rmor|[Ww]eapon))\s*\n</replace_>
                <with_>$4\n| image = $1\n| image caption = $2\n| image size = $3\n</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Remove blank lines</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\{\{(?:Armor|Weapon|Food|Medicine)(.*?\n)*?)^\|(?=\}\})</replace_>
                <with_ />
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>Multiline</regexOptions_>
              </IRule>
            </Children>
            <Name>Clean</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_ />
            <with_ />
            <ifContains_>\{\{(?:Armor|Weapon|Food|Item Statistics)</ifContains_>
            <ifNotContains_ />
            <regex_>false</regex_>
            <ifIsRegex_>true</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>false</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Resist</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\| *stats *=.*?)'*\[\[File\:Trans[ _](.*?)\.gif(?:\|.*?)?\]\][' ]*([\-\+]\d+)</replace_>
                <with_>{{Resist|$1|$2}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>MAB MDB</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\| *stats *=.*?)'*\"'*\[\[ *(Magic (?:Attack|Defense) Bonus) *(?:\|.*?)?\]\]'*\"[\:' ]*([\+\-]?\d+)</replace_>
                <with_>{{Stat|$1|$2}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Enhances</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\| *stats *=.*?)'*([Ee]nhances|[Aa]dds|[Aa]ugments) *\"'*\[\[(.*?)\]\]'*\" *[Ee]ffect'*</replace_>
                <with_>{{Stat|$1|$2}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Abilities</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\| *stats *=.*?)'*\"?(?:\[\[)(Store TP|Subtle Blow|Zanshin)\]\]\"?'* *([\-\+]?\d+)?</replace_>
                <with_>{{Stat|$1|$2}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Quotes</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\| *stats *=.*?)'*\"(?:\[\[)(.*?)\]\]\"'* *([\-\+]?\d+)?</replace_>
                <with_>{{Stat|""|$1|$2}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Basic stats</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\| *stats *=.*?)'*(?:\[\[(?:[\w \(\)]*?\|)?) *(HP|MP|STR|DEX|VIT|AGI|INT|MND|CHR|(?:Ranged|Magic|Weapon Skill)? *(?:Attack|Accuracy)|(?:Magic )?Evasion|Haste|Enmity) *(?:\]\])[' ]*([\+\-]?\d+\%?)</replace_>
                <with_>{{Stat|$1|$2}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Defense</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\| *stats *=.*?)'*(?:\[\[(?: *Defense *\| *)?)? *DEF *(?:\]\])?[\:' ]*([\+\-]?\d+\%?)</replace_>
                <with_>{{Stat|DEF|$1}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Skill</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\| *stats *=.*?)'*\[\[(?:\:Category\:)?(?:(.*?)(?: Skill)?\|.*?|(.+)) +Skill *(?:\]\])?[\:' ]*([\+\-]?\d+)</replace_>
                <with_>{{Stat|$1$2|skill|$3}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Fix bold</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\| *stats *=.*?)('+)([^'^\n]+?)(?= *\{\{Stat)</replace_>
                <with_>$1$2$1</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>IgnoreCase</regexOptions_>
              </IRule>
            </Children>
            <Name>Stat</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_ />
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>false</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
        </Children>
        <Name>Statistics</Name>
        <ruletype_>OnWholePage</ruletype_>
        <replace_ />
        <with_ />
        <ifContains_ />
        <ifNotContains_ />
        <regex_>false</regex_>
        <ifIsRegex_>false</ifIsRegex_>
        <numoftimes_>1</numoftimes_>
        <ifRegexOptions_>None</ifRegexOptions_>
        <regexOptions_>None</regexOptions_>
      </IRule>
      <IRule xsi:type="Rule">
        <enabled_>true</enabled_>
        <Children>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Apply template</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>\{\|cellpadding="5" width="100%"\n\|width="50%" valign="top"\|\n==Statistics==\n((?:.*?\n)*?)(?:\|width="50%" valign="top"\|\n==Other Uses==\n((?:.*?\n)*?))(?:\|-\n\|width="50%" valign="top"\|\n==Synthesis Recipes?==\n((?:.*?\n)*?))(?:\|width="50%" valign="top"\|\n==Used in Recipes?==\n((?:.*?\n)*?))(?:\|-\n\|width="50%" valign="top"\|\n==Desynthesis Recipes?==\n((?:.*?\n)*?))(?:\|width="50%" valign="top"\|\n==Obtained from Desynthesis==\n((?:.*?\n)*?))\|\}\n==How to Obtain==\n((?:.*?|\n)*?)(?=\n==[^=]*?==|$)</replace_>
            <with_>\n{{Item Header|Statistics}}\n$1\n{{Item Header|Other Uses}}\n$2\n{{Item Header|Synthesis Recipes}}\n$3\n{{Item Header|Used in Recipes}}\n$4\n{{Item Header|Desynthesis Recipes}}\n$5\n{{Item Header|Obtained from Desynthesis}}\n$6\n{{Item Header|How to Obtain}}\n$7\n\n{{Item Header|How to Obtain|end}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>How to Obtain</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\{\{Item Header\|How to Obtain\}\}(?:.*\n)*?)===([^=#\|\{\}]*?)===(?=(?:.*\n)*?\{\{Item Header\|How to Obtain\|end\}\})</replace_>
            <with_>\n{{Item Header|How to Obtain|$1}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children />
            <Name>Remove NOTOC</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>__NOTOC__(?=(?:.*\n)*\{\{Item Header)</replace_>
            <with_ />
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>IgnoreCase</regexOptions_>
          </IRule>
        </Children>
        <Name>Item Header</Name>
        <ruletype_>OnWholePage</ruletype_>
        <replace_ />
        <with_ />
        <ifContains_ />
        <ifNotContains_ />
        <regex_>false</regex_>
        <ifIsRegex_>false</ifIsRegex_>
        <numoftimes_>1</numoftimes_>
        <ifRegexOptions_>None</ifRegexOptions_>
        <regexOptions_>None</regexOptions_>
      </IRule>
      <IRule xsi:type="Rule">
        <enabled_>true</enabled_>
        <Children>
          <IRule xsi:type="Rule">
            <enabled_>false</enabled_>
            <Children />
            <Name>Remove trailing lines</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(^\{\{[\w\s]+\s*(?:^\|.+\s+)+?^\}\})\s*</replace_>
            <with_>$1\n</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>Multiline</regexOptions_>
          </IRule>
        </Children>
        <Name>Clean templates</Name>
        <ruletype_>OnWholePage</ruletype_>
        <replace_ />
        <with_ />
        <ifContains_ />
        <ifNotContains_ />
        <regex_>false</regex_>
        <ifIsRegex_>false</ifIsRegex_>
        <numoftimes_>1</numoftimes_>
        <ifRegexOptions_>None</ifRegexOptions_>
        <regexOptions_>IgnoreCase</regexOptions_>
      </IRule>
      <IRule xsi:type="Rule">
        <enabled_>false</enabled_>
        <Children>
          <IRule xsi:type="Rule">
            <enabled_>true</enabled_>
            <Children>
              <IRule xsi:type="Rule">
                <enabled_>true</enabled_>
                <Children />
                <Name>Plus</Name>
                <ruletype_>OnWholePage</ruletype_>
                <replace_>(?&lt;=\{\{Synthesis Recipe(?:.*?\n)*\| (?:subcraft *\d* *)?cap = \d+\+)(?=\n)</replace_>
                <with_>{{verification}}</with_>
                <ifContains_ />
                <ifNotContains_ />
                <regex_>true</regex_>
                <ifIsRegex_>false</ifIsRegex_>
                <numoftimes_>1</numoftimes_>
                <ifRegexOptions_>None</ifRegexOptions_>
                <regexOptions_>None</regexOptions_>
              </IRule>
            </Children>
            <Name>Crafting cap</Name>
            <ruletype_>OnWholePage</ruletype_>
            <replace_>(?&lt;=\{\{Synthesis Recipe(?:.*?\n)*\| (?:subcraft *\d* *)?cap = \d+ *\- *\d+ *)(?=\n)</replace_>
            <with_>{{verification}}</with_>
            <ifContains_ />
            <ifNotContains_ />
            <regex_>true</regex_>
            <ifIsRegex_>false</ifIsRegex_>
            <numoftimes_>1</numoftimes_>
            <ifRegexOptions_>None</ifRegexOptions_>
            <regexOptions_>None</regexOptions_>
          </IRule>
        </Children>
        <Name>Verification</Name>
        <ruletype_>OnWholePage</ruletype_>
        <replace_ />
        <with_ />
        <ifContains_ />
        <ifNotContains_ />
        <regex_>false</regex_>
        <ifIsRegex_>false</ifIsRegex_>
        <numoftimes_>1</numoftimes_>
        <ifRegexOptions_>None</ifRegexOptions_>
        <regexOptions_>None</regexOptions_>
      </IRule>
    </AdvancedReps>
    <SubstTemplates />
    <IncludeComments>false</IncludeComments>
    <ExpandRecursively>true</ExpandRecursively>
    <IgnoreUnformatted>false</IgnoreUnformatted>
  </FindAndReplace>
  <Editprefs>
    <GeneralFixes>true</GeneralFixes>
    <Tagger>true</Tagger>
    <Unicodify>true</Unicodify>
    <Recategorisation>2</Recategorisation>
    <NewCategory>A</NewCategory>
    <NewCategory2 />
    <ReImage>1</ReImage>
    <ImageFind>Image</ImageFind>
    <Replace>File</Replace>
    <SkipIfNoCatChange>false</SkipIfNoCatChange>
    <RemoveSortKey>false</RemoveSortKey>
    <SkipIfNoImgChange>false</SkipIfNoImgChange>
    <AppendText>false</AppendText>
    <AppendTextMetaDataSort>false</AppendTextMetaDataSort>
    <Append>true</Append>
    <Text />
    <Newlines>2</Newlines>
    <AutoDelay>10</AutoDelay>
    <BotMaxEdits>0</BotMaxEdits>
    <SupressTag>false</SupressTag>
    <RegexTypoFix>false</RegexTypoFix>
  </Editprefs>
  <General>
    <AutoSaveEdit>
      <Enabled>false</Enabled>
      <SavePeriod>30</SavePeriod>
      <SaveFile />
    </AutoSaveEdit>
    <SelectedSummary>clean up</SelectedSummary>
    <Summaries>
      <string>clean up</string>
      <string>re-categorisation per [[WP:CFD|CFD]]</string>
      <string>clean up and re-categorisation per [[WP:CFD|CFD]]</string>
      <string>removing category per [[WP:CFD|CFD]]</string>
      <string>[[Wikipedia:Template substitution|subst:'ing]]</string>
      <string>[[Wikipedia:WikiProject Stub sorting|stub sorting]]</string>
      <string>[[WP:AWB/T|Typo fixing]]</string>
      <string>bad link repair</string>
      <string>Fixing [[Wikipedia:Disambiguation pages with links|links to disambiguation pages]]</string>
      <string>Unicodifying</string>
    </Summaries>
    <PasteMore>
      <string />
      <string />
      <string />
      <string />
      <string />
      <string />
      <string />
      <string />
      <string />
      <string />
    </PasteMore>
    <FindText />
    <FindRegex>false</FindRegex>
    <FindCaseSensitive>false</FindCaseSensitive>
    <WordWrap>true</WordWrap>
    <ToolBarEnabled>false</ToolBarEnabled>
    <BypassRedirect>true</BypassRedirect>
    <AutoSaveSettings>false</AutoSaveSettings>
    <noSectionEditSummary>false</noSectionEditSummary>
    <restrictDefaultsortAddition>true</restrictDefaultsortAddition>
    <restrictOrphanTagging>true</restrictOrphanTagging>
    <noMOSComplianceFixes>false</noMOSComplianceFixes>
    <syntaxHighlightEditBox>false</syntaxHighlightEditBox>
    <highlightAllFind>false</highlightAllFind>
    <PreParseMode>false</PreParseMode>
    <NoAutoChanges>false</NoAutoChanges>
    <OnLoadAction>0</OnLoadAction>
    <DiffInBotMode>false</DiffInBotMode>
    <Minor>true</Minor>
    <AddToWatchlist>2</AddToWatchlist>
    <TimerEnabled>false</TimerEnabled>
    <SortListAlphabetically>false</SortListAlphabetically>
    <AddIgnoredToLog>false</AddIgnoredToLog>
    <EditToolbarEnabled>true</EditToolbarEnabled>
    <filterNonMainSpace>false</filterNonMainSpace>
    <AutoFilterDuplicates>false</AutoFilterDuplicates>
    <FocusAtEndOfEditBox>false</FocusAtEndOfEditBox>
    <scrollToUnbalancedBrackets>false</scrollToUnbalancedBrackets>
    <TextBoxSize>10</TextBoxSize>
    <TextBoxFont>Courier New</TextBoxFont>
    <LowThreadPriority>false</LowThreadPriority>
    <Beep>false</Beep>
    <Flash>false</Flash>
    <Minimize>false</Minimize>
    <LockSummary>false</LockSummary>
    <SaveArticleList>true</SaveArticleList>
    <SuppressUsingAWB>false</SuppressUsingAWB>
    <AddUsingAWBToActionSummaries>false</AddUsingAWBToActionSummaries>
    <IgnoreNoBots>false</IgnoreNoBots>
    <ClearPageListOnProjectChange>false</ClearPageListOnProjectChange>
    <SortInterWikiOrder>true</SortInterWikiOrder>
    <ReplaceReferenceTags>true</ReplaceReferenceTags>
    <LoggingEnabled>true</LoggingEnabled>
    <AlertPreferences />
  </General>
  <SkipOptions>
    <SkipNonexistent>true</SkipNonexistent>
    <Skipexistent>false</Skipexistent>
    <SkipDontCare>false</SkipDontCare>
    <SkipWhenNoChanges>false</SkipWhenNoChanges>
    <SkipSpamFilterBlocked>false</SkipSpamFilterBlocked>
    <SkipInuse>false</SkipInuse>
    <SkipWhenOnlyWhitespaceChanged>false</SkipWhenOnlyWhitespaceChanged>
    <SkipOnlyGeneralFixChanges>true</SkipOnlyGeneralFixChanges>
    <SkipOnlyMinorGeneralFixChanges>false</SkipOnlyMinorGeneralFixChanges>
    <SkipOnlyCosmetic>false</SkipOnlyCosmetic>
    <SkipOnlyCasingChanged>false</SkipOnlyCasingChanged>
    <SkipIfRedirect>false</SkipIfRedirect>
    <SkipIfNoAlerts>false</SkipIfNoAlerts>
    <SkipDoes>false</SkipDoes>
    <SkipDoesText />
    <SkipDoesRegex>false</SkipDoesRegex>
    <SkipDoesCaseSensitive>false</SkipDoesCaseSensitive>
    <SkipDoesAfterProcessing>false</SkipDoesAfterProcessing>
    <SkipDoesNot>false</SkipDoesNot>
    <SkipDoesNotText />
    <SkipDoesNotRegex>false</SkipDoesNotRegex>
    <SkipDoesNotCaseSensitive>false</SkipDoesNotCaseSensitive>
    <SkipDoesNotAfterProcessing>false</SkipDoesNotAfterProcessing>
    <SkipNoFindAndReplace>false</SkipNoFindAndReplace>
    <SkipMinorFindAndReplace>false</SkipMinorFindAndReplace>
    <SkipNoRegexTypoFix>false</SkipNoRegexTypoFix>
    <SkipNoDisambiguation>false</SkipNoDisambiguation>
    <SkipNoLinksOnPage>false</SkipNoLinksOnPage>
    <GeneralSkipList />
  </SkipOptions>
  <Module>
    <Enabled>false</Enabled>
    <Language>C# 3.5</Language>
    <Code>        public string ProcessArticle(string ArticleText, string ArticleTitle, int wikiNamespace, out string Summary, out bool Skip)
        {
            Skip = false;
            Summary = "test";

            ArticleText = "test \r\n\r\n" + ArticleText;

            return ArticleText;
        }</Code>
  </Module>
  <ExternalProgram>
    <Enabled>false</Enabled>
    <Skip>false</Skip>
    <Program />
    <Parameters />
    <PassAsFile>true</PassAsFile>
    <OutputFile />
  </ExternalProgram>
  <Disambiguation>
    <Enabled>false</Enabled>
    <Link />
    <Variants />
    <ContextChars>20</ContextChars>
  </Disambiguation>
  <Special>
    <namespaceValues />
    <remDupes>true</remDupes>
    <sortAZ>true</sortAZ>
    <filterTitlesThatContain>false</filterTitlesThatContain>
    <filterTitlesThatContainText />
    <filterTitlesThatDontContain>false</filterTitlesThatDontContain>
    <filterTitlesThatDontContainText />
    <areRegex>false</areRegex>
    <opType>-1</opType>
    <remove />
  </Special>
  <Tool>
    <ListComparerUseCurrentArticleList>0</ListComparerUseCurrentArticleList>
    <ListSplitterUseCurrentArticleList>0</ListSplitterUseCurrentArticleList>
    <DatabaseScannerUseCurrentArticleList>0</DatabaseScannerUseCurrentArticleList>
  </Tool>
  <Plugin />
</AutoWikiBrowserPreferences>