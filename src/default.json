{
  "project": "custom",
  "languageCode": "en",
  "editPreferences": {
    "appendNewlines": "2",
    "appendOrPrepend": "true",
    "appendPrependSortMetaData": "false",
    "appendPrependText": "false",
    "appendText": null,
    "botDelay": "0",
    "botMaxEdits": "0",
    "category1": null,
    "category2": null,
    "findFile": null,
    "fixTypos": "false",
    "generalFixes": "false",
    "modifyCategories": "0",
    "modifyFiles": "0",
    "removeSortKey": "false",
    "replaceFile": null,
    "skipIfNoCategoryChange": "false",
    "skipIfNoImageChange": "false",
    "supressTag": "true",
    "tagger": "false",
    "unicodify": "false"
  },
  "findAndReplace": {
    "replacements": [
      {
        "comment": "Technical (<br> uniformity)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "<br>",
        "regexOptions": "IgnoreCase",
        "find": "\\< *br *\\/? *\\>",
        "minor": "true"
      },
      {
        "comment": "Whitespace (Remove trailing whitespace)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase Multiline",
        "find": "(?<=^[^\\s]+?)[ \\t]+$",
        "minor": "true"
      },
      {
        "comment": "Whitespace (Remove spaces within templates/links)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "$1",
        "regexOptions": "IgnoreCase",
        "find": "(?<=\\[\\[|\\{\\{)\\s*(.+?)\\s*(?=\\]\\]|\\}\\})",
        "minor": "true"
      },
      {
        "comment": "Whitespace (Remove spaces inside templates/links)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "$1",
        "regexOptions": "IgnoreCase",
        "find": "(?<=(?:\\[\\[|\\{\\{).*?)[ \\t]*(\\|)[ \\t]*(?=.*?(?:\\]\\]|\\}\\}))",
        "minor": "true"
      },
      {
        "comment": "Whitespace (Remove leading spaces)",
        "afterFixes": "true",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "^\\s+(?=(?:__NOTOC__|\\[\\[Category))",
        "minor": "true"
      },
      {
        "comment": "Whitespace (Remove space between categories)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "(?<=\\[\\[Category:.+?\\]\\])\\s+(?=\\[\\[Category)",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove duplicate categories)",
        "afterFixes": "true",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "(?<=\\[\\[Category:([^\\]]+?)\\]\\](?:.|\\n)*?)\\[\\[Category:\\1\\]\\]",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove comment)",
        "afterFixes": "true",
        "isRegex": "false",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "<!--!!!!Marked\\ for\\ Bot!!!!-->",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove comment)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "\\s*\\<!--Use '''Crafted Only!''' if item is obtained by synthesis only--\\>",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove comment)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "\\s*\\<!--Use \\{\\{Crafted Only\\}\\} if item is obtained by synthesis only--\\>",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove comment)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "\\s*\\<!--same format for Excavation, Mining, Logging, Harvesting, Clamming--\\>",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove comment)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "\\s*\\<!-- For Weapons and Armor\\. Info is to be displayed exactly as it is in\\-game\\. --\\>",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove comment)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "\\s*\\<!-- For Weapons, Armor, Food, or Medicine, go the following page and copy the text in the \"Usage\" section of that page\\. --\\>",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove comment)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "\\s*\\<!-- Number in a stack, or Not Stackable --\\>",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove comment)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "\\s*\\<!--Same format for Special Events--\\>",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove comment)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "\\s*\\<!-- Usage is \\{\\{Guild Points Value|points per item|maximum points}} If nothing is defined, it will display None\\. See Template:Guild Points Value for more details\\. --\\>",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove comment)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "\\s*<!-- Usage is {{Resale Price|<min>|<max>}} or {{Resale Price|None}} if the item can't be sold\\. See Template:Resale Price for more details\\. --\\>",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove comment)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "\\s*\\<!-- Template:Weapon, Template:Armor, Template:Food, Template: Medicine --\\>",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove stub)",
        "afterFixes": "false",
        "isRegex": "false",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "\\*\\[\\[]]",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove stub)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "\\*\\[\\[\\<stat\\>\\|\\{\\{\\<Color\\>\\|\\<stat and modifier\\>\\}\\}\\]\\]\\s+",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove unnecessary link)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "[[$1]]",
        "regexOptions": "IgnoreCase",
        "find": "\\[\\[ *([^\\|]*?) *(?:\\| *\\1 *)?\\]\\]",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove unnecessary namespace)",
        "afterFixes": "false",
        "isRegex": "false",
        "enabled": "true",
        "replace": "{{",
        "regexOptions": "IgnoreCase",
        "find": "\\{\\{Template:",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove unnecessary breaks in list)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "true",
        "replace": "$1\\n",
        "regexOptions": "IgnoreCase Multiline",
        "find": "(?:\\<br\\>)*(\\n?^[\\:\\*]+.+?)(?:\\<br\\>)*\\n+",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove deprecated template: Rare2/Ex2/Temp2/Aug2/Augment2)",
        "afterFixes": "false",
        "isRegex": "true",
        "enabled": "false",
        "replace": "{{$1|nc}}",
        "regexOptions": "IgnoreCase",
        "find": "\\{\\{(Rare|Exclusive|Temp|Aug(?:ment)?)2}}",
        "minor": "true"
      },
			{
				"find": "\\{\\{EvolithShape (Filled|Empty)(.+?)(Down|Up)?\\|(.+?)\\}\\} *(\\d+)",
				"replace": "{{Evolith|$4|$1 $2 $3|$5}}",
				"comment": "Cleanup (Remove deprecated template: EvolithShape)",
				"isRegex": "true",
				"enabled": "true",
				"minor": "false",
				"afterFixes": "true",
				"regexOptions": "IgnoreCase"
			},
			{
				"find": "(\\{\\{Evolith\\|.+?) (\\|.+)",
				"replace": "$1$2",
				"comment": "Cleanup (Remove deprecated template: EvolithShape)",
				"isRegex": "true",
				"enabled": "true",
				"minor": "true",
				"afterFixes": "true",
				"regexOptions": "IgnoreCase"
			},
      {
        "find": "[' ]*\\[\\[(Fire|Earth|Water|Wind|Ice|Lightning|Light|Dark) Crystal\\|[' ]*\\< *font *color=\".+?\" *\\>[ ']*\\1 *Crystal[' ]*\\< */ *font *\\>[' ]*\\]\\][' \\:]*",
        "replace": "{{$1|Crystal}}",
        "comment": "Apply template (Crystal)",
        "isRegex": "true",
        "enabled": "true",
        "minor": "false",
        "afterFixes": "false",
        "regexOptions": "IgnoreCase"
      },
      {
        "find": "\\[\\[(Fire|Earth|Water|Wind|Ice|Lightning|Light|Dark) Crystal\\|\\{\\{\\1\\|\\1 *Crystal\\}\\}\\]\\]",
        "replace": "{{$1|Crystal}}",
        "comment": "Apply template (Crystal)",
        "isRegex": "true",
        "enabled": "true",
        "minor": "false",
        "afterFixes": "false",
        "regexOptions": "IgnoreCase"
      },
      {
        "find": "\\{\\{(.+)\\|\\1 Crystal\\}\\}",
        "replace": "{{$1|Crystal}}",
        "comment": "Cleanup template (Crystal)",
        "isRegex": "true",
        "enabled": "true",
        "minor": "false",
        "afterFixes": "false",
        "regexOptions": "IgnoreCase"
      },
      {
        "comment": "Cleanup (Move NOTOC to end of line)",
        "afterFixes": "true",
        "isRegex": "true",
        "enabled": "true",
        "replace": "$2$1",
        "regexOptions": "IgnoreCase Multiline",
        "find": "(__NOTOC__)(.+)$",
        "minor": "true"
      },
      {
        "comment": "Cleanup (Remove duplicate NOTOC)",
        "afterFixes": "true",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "(?<=__NOTOC__(?:.*\\n)*?)__NOTOC__",
        "minor": "true"
      },
      {
        "comment": "Fix table (Leading whitespace)",
        "afterFixes": "true",
        "isRegex": "true",
        "enabled": "false",
        "replace": "\\n",
        "regexOptions": "IgnoreCase Multiline",
        "find": "(?<=^[^\\s:]+)(?=\\{\\|)",
        "minor": "true"
      },
      {
        "comment": "Fix table (Trailing whitespace)",
        "afterFixes": "true",
        "isRegex": "true",
        "enabled": "false",
        "replace": "\\n",
        "regexOptions": "IgnoreCase Multiline",
        "find": "(?<=^\\|\\})(?=[^\\}].+?\\n)",
        "minor": "true"
      },
      {
        "comment": "Fix table (Add missing footer)",
        "afterFixes": "true",
        "isRegex": "true",
        "enabled": "false",
        "replace": "\\n|}",
        "regexOptions": "IgnoreCase",
        "find": "(?<=\\{\\|.*?\\n(?:(?!\\|\\}).*?\\n)+(?!\\|\\}).*?)$",
        "minor": "true"
      },
      {
        "comment": "Fix table (Invalid cell)",
        "afterFixes": "true",
        "isRegex": "true",
        "enabled": "false",
        "replace": "|",
        "regexOptions": "IgnoreCase Multiline",
        "find": "(?<=^(?:\\|-|\\{\\|).*\\s+)^\\|\\s*\\|",
        "minor": "true"
      },
      {
        "comment": "Fix header",
        "afterFixes": "true",
        "isRegex": "true",
        "enabled": "true",
        "replace": "\\n$1\\n",
        "regexOptions": "IgnoreCase",
        "find": "(?<=[^\\=\\n]+?)((\\={2,4})[^\\=\\n]+?\\2)\\n*",
        "minor": "true"
      },
      {
        "comment": "Whitespace (Remove trailing whitespace; after fixes)",
        "afterFixes": "true",
        "isRegex": "true",
        "enabled": "true",
        "replace": "",
        "regexOptions": "IgnoreCase",
        "find": "(?<=^[^\\s]+?)[ \\t]+$",
        "minor": "true"
      }
    ],
    "ignoreUnformatted": "false",
    "substTemplates": "",
    "expandRecursively": "true",
    "advancedReplacements": [
      {
        "enabled": "true",
        "children": [
          {
            "enabled": "true",
            "comment": "Remove excess categories",
            "type": "OnWholePage",
            "find": "\\[\\[Category:(Rare|Exclusive|Augmented|Temporary)\\]\\]\\s*(?=(?:.*?\\n)*?.*?\\{\\{\\1\\}\\})",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "None"
          }
        ],
        "comment": "Tags",
        "type": "OnWholePage",
        "isRegex": "false",
        "ifIsRegex": "false",
        "numberOfTimes": "1",
        "ifRegexOptions": "None",
        "regexOptions": "None"
      },
      {
        "ifContains": "",
        "comment": "Location",
        "ifIsRegex": "false",
        "isRegex": "false",
        "enabled": "true",
        "replace": "",
        "children": [
          {
            "ifContains": "",
            "comment": "Location",
            "ifIsRegex": "false",
            "isRegex": "true",
            "enabled": "true",
            "replace": "{{Location|$1|map = $2$3|$4}}",
            "children": [],
            "regexOptions": "None",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "numberOfTimes": "1",
            "type": "OnWholePage",
            "find": "(?<=[\\|\\=](?:&nbsp;| )*)\\[\\[([^\\]\\|]*?)\\]\\][', ]*(?:(?:at|around|near) +)?(?:([^\\(]\\w+?[^\\)])'*|,? '*\\((.*?)\\)'*)? *\\(?([A-Z]-\\d+)\\)?"
          },
          {
            "enabled": "false",
            "comment": "Specific Location",
            "type": "OnWholePage",
            "find": "(\\{\\{Location\\|.*)\\}\\}(?:\\<br\\>|&nbsp;|[ \\:\\*])*\\n[\\:' \\(]*([^\\|].*?)[\\)' ]*\\n",
            "replace": "$1|$2}}\\n",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "None"
          },
          {
            "ifContains": "",
            "comment": "Cleanup",
            "ifIsRegex": "false",
            "isRegex": "true",
            "enabled": "true",
            "replace": "",
            "children": [],
            "regexOptions": "None",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "numberOfTimes": "1",
            "type": "OnWholePage",
            "find": "(?<=\\{\\{Location\\|.*?\\|)map = \\|(?=.*?\\}\\})"
          }
        ],
        "regexOptions": "None",
        "ifNotContains": "",
        "ifRegexOptions": "None",
        "numberOfTimes": "1",
        "type": "OnWholePage",
        "find": ""
      },
      {
        "enabled": "true",
        "children": [
          {
            "enabled": "true",
            "comment": "Delink gil",
            "type": "OnWholePage",
            "find": "(?<=\\=\\=How to Obtain\\=\\=\\n(?:.*?\\n)*\\{\\|.*?\\n(?:.*?\\n?)*?)\\[\\[gil\\]\\]",
            "replace": "gil",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "IgnoreCase"
          },
          {
            "enabled": "true",
            "comment": "Combine broken lines",
            "type": "OnWholePage",
            "find": "(?<=^\\|(?:.+\\|)?.*?\\<br\\> *)\\n",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "10",
            "ifRegexOptions": "None",
            "regexOptions": "Multiline"
          },
          {
            "enabled": "true",
            "children": [
              {
                "enabled": "true",
                "comment": "spacing padding",
                "type": "OnWholePage",
                "find": "(^\\{\\|.*?)(cellspacing=\"\\d+\")(.*?)(cellpadding=\"\\d+\")",
                "replace": "$1$3 $4 $2",
                "isRegex": "true",
                "ifIsRegex": "false",
                "numberOfTimes": "1",
                "ifRegexOptions": "None",
                "regexOptions": "IgnoreCase Multiline"
              },
              {
                "enabled": "true",
                "comment": "padding spacing",
                "type": "OnWholePage",
                "find": "(^\\{\\|.*?)(cellpadding=\"\\d+\")(.*?)(cellspacing=\"\\d+\")",
                "replace": "$1$3 $2 $4",
                "isRegex": "true",
                "ifIsRegex": "false",
                "numberOfTimes": "1",
                "ifRegexOptions": "None",
                "regexOptions": "IgnoreCase Multiline"
              }
            ],
            "comment": "Cellspacing/padding",
            "type": "OnWholePage",
            "isRegex": "false",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "None"
          },
          {
            "enabled": "true",
            "children": [
              {
                "enabled": "true",
                "comment": "Remove blank style element",
                "type": "OnWholePage",
                "find": " *style=\"\"",
                "isRegex": "true",
                "ifIsRegex": "false",
                "numberOfTimes": "1",
                "ifRegexOptions": "None",
                "regexOptions": "IgnoreCase"
              }
            ],
            "comment": "Replace style background with bgcolor",
            "type": "OnWholePage",
            "find": "style *= *\" *(.*?)background(?:-color)?: *(#?\\w+);? *(.*?) *\"",
            "replace": "BGCOLOR=\"$2\" style=\"$1$3\"",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "IgnoreCase"
          },
          {
            "enabled": "true",
            "comment": "Remove rowspan and colspan of 1",
            "type": "OnWholePage",
            "find": "(?<=\\|-?(?:[^\\|]*? )?) *(?:col|row)span *= *\" *1 *\" *",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "IgnoreCase"
          },
          {
            "enabled": "true",
            "comment": "Remove spacing in header",
            "type": "OnWholePage",
            "find": "^! *([^\\|\\n]*?) *\\| *",
            "replace": "!$1| ",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "Multiline"
          },
          {
            "enabled": "true",
            "comment": "Remove excess bolding in header",
            "type": "OnWholePage",
            "find": "^!(.*\\| *)?'''(.*?)'''",
            "replace": "!$1$2",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "Multiline"
          },
          {
            "enabled": "true",
            "comment": "Apply class",
            "type": "OnWholePage",
            "find": "\\{\\| *(.*?) *cellpadding=\"[234]\" +cellspacing=\"[234]\"(.*)(?=\\s*(?:(?:^\\|-.*)?^[\\|!].*?BGCOLOR=\"#ffdead;?\"|^\\|- *BGCOLOR=\"#ffdead;?\").*\\s*(?:^[\\|!:\\*][^\\}].*\\s*)*?^\\|\\})",
            "replace": "{|$1$2 class=\"ffxi-table\"",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "IgnoreCase Multiline"
          },
          {
            "enabled": "true",
            "comment": "Use header markup",
            "type": "OnWholePage",
            "find": "(?<=\\{\\|.*?class=\"ffxi-table\".*\\s*(?:^[\\|!].*\\s*)*?)^\\| *align=\"center\" +BGCOLOR=\"#ffdead\" +(.*?)\\| *'''(.*?)'''(\\s*)",
            "replace": "!$1| $2$3",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "IgnoreCase Multiline"
          },
          {
            "enabled": "true",
            "comment": "Apply header class",
            "type": "OnWholePage",
            "find": "(?<=\\{\\|.*?class=\"ffxi-table\".*\\s*(?:^[\\|!].*\\s*)*?)^\\|(.*?) *BGCOLOR=\"#ffdead;?\" *(.*?)\\|(?=.*\\s*(?:^[\\|!].*\\s*)*?^\\|\\})",
            "replace": "|class=\"ffxi-header\" $1 $2|",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "IgnoreCase Multiline"
          },
          {
            "enabled": "true",
            "comment": "Replace blue bg",
            "type": "OnWholePage",
            "find": "(?<=\\{\\|.*?class=\"ffxi-table\".*\\s*(?:^[\\|!:\\*].*\\s*)*?)^(\\|-?.*?) *BGCOLOR=\"#(?:e3e6ff|d5d9ff);?\"(?=.*\\s*(?:^[\\|!:\\*].*\\s*)*?^\\|\\})",
            "replace": "$1",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "IgnoreCase Multiline"
          },
          {
            "enabled": "true",
            "comment": "Replace footer bg",
            "type": "OnWholePage",
            "find": "(?<=\\{\\|.*?class=\"ffxi-table\".*\\s*(?:^[\\|!:\\*].*\\s*)*?)^(\\|-?.*?) *BGCOLOR=\"#(?:ffdead);?\"(?=.*\\s*(?:^[\\|!:\\*].*\\s*)^\\|\\})",
            "replace": " class=\"ffxi-footer\"",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "IgnoreCase Multiline"
          },
          {
            "enabled": "true",
            "children": [
              {
                "enabled": "true",
                "comment": "Replace with class",
                "type": "OnWholePage",
                "find": "(?<=\\{\\|.*?class=\"ffxi-table\".*\\s*(?:^[\\|!:\\*].*\\s*)*?)^((?:\\|-?|!).*?) *BGCOLOR=\"#(?:ffdead);?\"(?=.*\\s*(?:^[\\|!:\\*].*\\s*)+?^\\|\\})",
                "replace": "$1 class=\"ffxi-header\"",
                "isRegex": "true",
                "ifIsRegex": "false",
                "numberOfTimes": "1",
                "ifRegexOptions": "None",
                "regexOptions": "IgnoreCase Multiline"
              },
              {
                "enabled": "true",
                "comment": "Remove redundant class",
                "type": "OnWholePage",
                "find": "(?<=\\{\\|.*?class=\"ffxi-table\".*\\s*(?:^[\\|!:\\*].*\\s*)*?^!.*?) *class=\"ffxi-header\"",
                "isRegex": "true",
                "ifIsRegex": "false",
                "numberOfTimes": "1",
                "ifRegexOptions": "None",
                "regexOptions": "Multiline"
              }
            ],
            "comment": "Replace header bg",
            "type": "OnWholePage",
            "find": "(?<=\\{\\|.*?class=\"ffxi-table\".*\\s*(?:^[\\|!:\\*].*\\s*)*?)^(\\|-?.*?) *BGCOLOR=\"#(?:ffdead);?\"(?=.*\\s*^!.*\\s*(?:^[\\|!:\\*].*\\s*)*?^\\|\\})",
            "replace": "$1",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "IgnoreCase Multiline"
          },
          {
            "enabled": "true",
            "comment": "Replace nm bg",
            "type": "OnWholePage",
            "find": "(?<=\\{\\|.*?class=\"ffxi-table\".*\\s*(?:^[\\|!:\\*].*\\s*)*?)^(\\|-?.*?) *BGCOLOR=\"(?:#ffd9d9|mistyrose);?\"(?=.*\\s*(?:^\\|(?:.*\\|)? *''' *\\[\\[[^\\[\\n]*?\\]\\][^'\\n]*'''.*\\s*)(?:^[\\|!:\\*].*\\s*)*?^\\|\\})",
            "replace": "$1 class=\"bg-nm\"",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "IgnoreCase Multiline"
          },
          {
            "enabled": "true",
            "children": [
              {
                "enabled": "true",
                "comment": "Replace nm bg",
                "type": "OnWholePage",
                "find": "(?<=\\{\\|.*?class=\"ffxi-table\".*\\s*(?:^[\\|!:\\*].*\\s*)*?)^\\|-?(.*?) *BGCOLOR=\"#ffd9d9;?\"(?=.*\\s*(?:^\\|(?:.*\\|)? *''' *\\[\\[[^\\[\\n]*?\\]\\][^'\\n]*'''.*\\s*)(?:^[\\|!:\\*].*\\s*)*?^\\|\\})",
                "replace": "|- class=\"bg-nm\"",
                "isRegex": "true",
                "ifIsRegex": "false",
                "numberOfTimes": "1",
                "ifRegexOptions": "None",
                "regexOptions": "IgnoreCase Multiline"
              }
            ],
            "comment": "Replace red bg",
            "type": "OnWholePage",
            "find": "(?<=\\{\\|.*?class=\"ffxi-table\".*\\s*(?:^[\\|!:\\*].*\\s*)*?)^(\\|-?.*?) *BGCOLOR=\"#ffd9d9;?\"(?=.*\\s*(?:^[\\|!:\\*].*\\s*)*?^\\|\\})",
            "replace": "$1 class=\"bg-red\"",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "IgnoreCase Multiline"
          },
          {
            "enabled": "true",
            "comment": "Remove excess rows",
            "type": "OnWholePage",
            "find": "(^\\|-\\s*){2,}",
            "replace": "|-\\n",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "Multiline"
          },
          {
            "enabled": "true",
            "comment": "Apply wide-table class",
            "type": "OnWholePage",
            "find": "\\{\\| *width=\"\\d\\d%\" class=\"ffxi-table\"",
            "replace": "{|class=\"ffxi-table wide-table\"",
            "isRegex": "true",
            "ifIsRegex": "false",
            "numberOfTimes": "1",
            "ifRegexOptions": "None",
            "regexOptions": "IgnoreCase Multiline"
          }
        ],
        "comment": "Tables",
        "type": "OnWholePage",
        "isRegex": "false",
        "ifIsRegex": "false",
        "numberOfTimes": "1",
        "ifRegexOptions": "None",
        "regexOptions": "None"
      }
    ],
    "ignoreMoreText": "false",
    "enabled": "true",
    "includeComments": "false",
    "appendSummary": "false",
    "ignoreSomeText": "false"
  },
  "generalPreferences": {
    "addIgnoredToLog": "false",
    "addToWatchlist": "2",
    "addUsingAWBToSummaries": "false",
    "autoFilterDuplicates": "false",
    "autoSaveSettings": "true",
    "beep": "false",
    "bypassRedirect": "true",
    "clearPageListOnProjectChange": "false",
    "diffInBotMode": "true",
    "editToolbarEnabled": "false",
    "filterNonMainNamespace": "false",
    "findCaseSensitive": "false",
    "findRegex": "false",
    "flash": "false",
    "focusAtEndOfEditBox": "false",
    "highlightAllFind": "false",
    "ignoreNoBots": "false",
    "lockSummary": "true",
    "loggingEnabled": "true",
    "lowThreadPriority": "false",
    "minimize": "false",
    "minor": "true",
    "noAutoChanges": "false",
    "noMOSComplianceFixes": "false",
    "noSectionEditSummary": "false",
    "onLoadAction": "0",
    "preParseMode": "false",
    "replaceReferenceTags": "true",
    "restrictDefaultsortAddition": "true",
    "restrictOrphanTagging": "true",
    "saveArticleList": "true",
    "scrollToUnbalancedBrackets": "false",
    "sortInterWikiOrder": "true",
    "sortListAlphabetically": "false",
    "suppressUsingAWB": "false",
    "syntaxHighlightEditBox": "false",
    "textBoxFont": "Courier New",
    "textBoxSize": "10",
    "timerEnabled": "false",
    "toolBarEnabled": "false",
    "wordWrap": "true"
  },
  "protocol": "http://",
  "customProject": "ffxiclopedia.wikia.com/",
  "skipPreferences": {
    "doesContain": "true",
    "doesContainIsAfterProcessing": "false",
    "doesContainIsCaseSensitive": "false",
    "doesContainIsRegex": "true",
    "doesContainText": "",
    "doesNotContain": "false",
    "doesNotContainIsAfterProcessing": "true",
    "doesNotContainIsCaseSensitive": "false",
    "doesNotContainIsRegex": "false",
    "doesNotContainText": "",
    "inUse": "false",
    "noAlerts": "false",
    "noChanges": "true",
    "noDisambiguation": "false",
    "noFindAndReplace": "false",
    "noLinksOnPage": "false",
    "noRegexTypoFix": "false",
    "onlyCasingChanged": "false",
    "onlyCosmetic": "false",
    "onlyGeneralFixChanges": "true",
    "onlyMinorFindAndReplace": "false",
    "onlyMinorGeneralFixChanges": "false",
    "onlyWhitespaceChanged": "true",
    "pageDoesNotExist": "true",
    "pageDontCare": "false",
    "pageExists": "false",
    "redirect": "true",
    "spamFilterBlocked": "true"
  }
}
