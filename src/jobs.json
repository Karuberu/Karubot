{
  "customProject": "ffxiclopedia.wikia.com/",
  "editPreferences": {
    "appendNewlines": "2",
    "appendOrPrepend": "true",
    "appendPrependSortMetaData": "false",
    "appendPrependText": "false",
    "appendText": "",
    "botDelay": "0",
    "botMaxEdits": "0",
    "category1": "",
    "category2": "",
    "findFile": "",
    "fixTypos": "false",
    "generalFixes": "false",
    "modifyCategories": "0",
    "modifyFiles": "0",
    "removeSortKey": "false",
    "replaceFile": "",
    "skipIfNoCategoryChange": "false",
    "skipIfNoImageChange": "false",
    "supressTag": "true",
    "tagger": "false",
    "unicodify": "false"
  },
  "findAndReplace": {
    "advancedReplacements": [
      {
        "children": [
          {
            "children": [],
            "comment": "Convert nc to regular",
            "enabled": "true",
            "find": "(?<=\\[\\[Category:(Rare|Exclusive|Augmented|Temporary)\\]\\](?:.*?\\n)*?.*?)\\{\\{\\1(?:\\|nc)?\\}\\}",
            "ifContains": "",
            "ifIsRegex": "false",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "isRegex": "true",
            "numberOfTimes": "7",
            "regexOptions": "IgnoreCase",
            "replace": "{{$1}}",
            "type": "OnWholePage"
          },
          {
            "children": [],
            "comment": "Remove excess categories",
            "enabled": "true",
            "find": "\\[\\[Category:(Rare|Exclusive|Augmented|Temporary)\\]\\]\\s*(?=(?:.*?\\n)*?.*?\\{\\{\\1\\}\\})",
            "ifContains": "",
            "ifIsRegex": "false",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "isRegex": "true",
            "numberOfTimes": "1",
            "regexOptions": "None",
            "replace": "",
            "type": "OnWholePage"
          }
        ],
        "comment": "Tags",
        "enabled": "true",
        "find": "",
        "ifContains": "",
        "ifIsRegex": "false",
        "ifNotContains": "",
        "ifRegexOptions": "None",
        "isRegex": "false",
        "numberOfTimes": "1",
        "regexOptions": "None",
        "replace": "",
        "type": "OnWholePage"
      },
      {
        "children": [
          {
            "children": [],
            "comment": "Location",
            "enabled": "true",
            "find": "(?<=\\| *)\\[\\[([^\\]^\\|]*?)\\]\\](?:,? '*([^\\(].*?[^\\)])'*|,? '*\\((.*?)\\)'*)? *\\(?([A-Z]-\\d+)\\)?",
            "ifContains": "",
            "ifIsRegex": "false",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "isRegex": "true",
            "numberOfTimes": "1",
            "regexOptions": "None",
            "replace": "{{Location|$1|map = $2$3|$4}}",
            "type": "OnWholePage"
          },
          {
            "children": [],
            "comment": "Specific Location",
            "enabled": "true",
            "find": "(\\{\\{Location\\|.*)\\}\\}(?:\\<br\\>|&nbsp;|[ \\:\\*])*\\n[\\:' \\(]*([^\\|].*?)[\\)' ]*\\n",
            "ifContains": "",
            "ifIsRegex": "false",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "isRegex": "true",
            "numberOfTimes": "1",
            "regexOptions": "None",
            "replace": "$1|$2}}\\n",
            "type": "OnWholePage"
          },
          {
            "children": [],
            "comment": "Cleanup",
            "enabled": "true",
            "find": "(?<=\\{\\{Location\\|.*?\\|)map = \\|(?=.*?\\}\\})",
            "ifContains": "",
            "ifIsRegex": "false",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "isRegex": "true",
            "numberOfTimes": "1",
            "regexOptions": "None",
            "replace": "",
            "type": "OnWholePage"
          }
        ],
        "comment": "Location",
        "enabled": "false",
        "find": "",
        "ifContains": "",
        "ifIsRegex": "false",
        "ifNotContains": "",
        "ifRegexOptions": "None",
        "isRegex": "false",
        "numberOfTimes": "1",
        "regexOptions": "None",
        "replace": "",
        "type": "OnWholePage"
      },
      {
        "children": [
          {
            "children": [],
            "comment": "Regional",
            "enabled": "true",
            "find": "\\[\\[ *Regional Merchants? *\\]\\]\\s+(?:\\:?[' ]*\\[\\[(.+?)\\|[' ]*\\1(?: [Rr]egion)?[' ]*\\]\\][' ]*|[' ]*\\([' ]*\\[\\[(.*?)\\]\\][' ]*\\)[' ]*)\\n",
            "ifContains": "",
            "ifIsRegex": "false",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "isRegex": "true",
            "numberOfTimes": "1",
            "regexOptions": "None",
            "replace": "{{Merchant|Regional|$1$2}}\\n",
            "type": "OnWholePage"
          },
          {
            "children": [],
            "comment": "Standard",
            "enabled": "true",
            "find": "\\[\\[ *Standard Merchants? *\\]\\]",
            "ifContains": "",
            "ifIsRegex": "false",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "isRegex": "true",
            "numberOfTimes": "1",
            "regexOptions": "None",
            "replace": "{{Merchant|Standard}}",
            "type": "OnWholePage"
          },
          {
            "children": [],
            "comment": "Guild",
            "enabled": "true",
            "find": "\\| *\\[\\[(?:Guild Merchant(?:\\|Guild Merchants)?(?:\\|?([\\w']+?) Guild)?|([\\w']+?) Guild)\\]\\]",
            "ifContains": "",
            "ifIsRegex": "false",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "isRegex": "true",
            "numberOfTimes": "1",
            "regexOptions": "None",
            "replace": "| {{Merchant|Guild|$1$2}}",
            "type": "OnWholePage"
          },
          {
            "children": [],
            "comment": "Conquest",
            "enabled": "true",
            "find": "\\{\\{Merchant\\|Standard\\}\\}(?:\\<br\\>|&nbsp;|[\\s\\:\\*'])*(?:(.+?)n?(?: citizens?)?(?: only)?,? (?:\\1 in )?(1st|2nd) place|(.+?) (?:[Cc]onquest\\:? )?(?:1st */ *)?(2nd)\\+?|(.+?) 1st or (2nd) in [Cc]onquest|Conquest[\\: ]*(.+?) (1st|2nd))(?: *place *)?[\\.' ]*(?=\\n)",
            "ifContains": "",
            "ifIsRegex": "false",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "isRegex": "true",
            "numberOfTimes": "1",
            "regexOptions": "None",
            "replace": "{{Merchant|Standard|nation = $1$3$5$7|conquest = $2$4$6$8}}",
            "type": "OnWholePage"
          },
          {
            "children": [],
            "comment": "Hours",
            "enabled": "true",
            "find": "(\\{\\{Merchant\\|.+?)\\}\\}(?:\\<br\\>|\\s)*\\(?Open *([\\d\\:\\- ]+)\\)?",
            "ifContains": "",
            "ifIsRegex": "false",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "isRegex": "true",
            "numberOfTimes": "1",
            "regexOptions": "None",
            "replace": "$1|hours = $2}}",
            "type": "OnWholePage"
          },
          {
            "children": [],
            "comment": "Holiday",
            "enabled": "true",
            "find": "(\\{\\{Merchant\\|.+?)\\}\\}\\s*Closed *(?:on)? *(\\w+day)",
            "ifContains": "",
            "ifIsRegex": "false",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "isRegex": "true",
            "numberOfTimes": "1",
            "regexOptions": "None",
            "replace": "$1|holiday = $2}}",
            "type": "OnWholePage"
          },
          {
            "children": [],
            "comment": "Restock",
            "enabled": "true",
            "find": "(\\{\\{Merchant\\|.+?)\\}\\}[\\s\\:']*(?:Not (?:[Aa]utomatically )?[Rr]estocked\\.?)[\\s']*",
            "ifContains": "",
            "ifIsRegex": "false",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "isRegex": "true",
            "numberOfTimes": "1",
            "regexOptions": "None",
            "replace": "$1|restocked = false}}\\n",
            "type": "OnWholePage"
          }
        ],
        "comment": "Merchant",
        "enabled": "true",
        "find": "",
        "ifContains": "",
        "ifIsRegex": "false",
        "ifNotContains": "",
        "ifRegexOptions": "None",
        "isRegex": "false",
        "numberOfTimes": "1",
        "regexOptions": "None",
        "replace": "",
        "type": "OnWholePage"
      },
      {
        "children": [
          {
            "comment": "Rule",
            "enabled": "true",
            "find": "\\| *valign=\"top\" *width=\"(\\d+)%\" *\\|",
            "ifContains": "",
            "ifIsRegex": "false",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "isRegex": "true",
            "numberOfTimes": "1",
            "regexOptions": "None",
            "replace": "</div>\\n<br style=\"clear: left;\"/>\\n<div style=\"float:left; margin-left:5px; width:$1%;\">",
            "type": "OnWholePage"
          },
          {
            "comment": "Rule",
            "enabled": "true",
            "find": "\\|\\}\\r?\\n\\|\\}",
            "ifContains": "",
            "ifIsRegex": "false",
            "ifNotContains": "",
            "ifRegexOptions": "None",
            "isRegex": "true",
            "numberOfTimes": "1",
            "regexOptions": "None",
            "replace": "|}\\n</div>\\n<br style=\"clear: left;\"/>",
            "type": "OnWholePage"
          }
        ],
        "comment": "Replace nested tables",
        "enabled": "true",
        "find": "\\{\\| *border=\"0\" *cellpadding=\"5\" *cellspacing=\"0\" *width=\"100%\"\\r?\\n\\| *valign=\"top\" *width=\"(\\d+)%\" *\\|",
        "ifContains": "",
        "ifIsRegex": "false",
        "ifNotContains": "",
        "ifRegexOptions": "None",
        "isRegex": "true",
        "numberOfTimes": "1",
        "regexOptions": "None",
        "replace": "<div style=\"float:left; margin-left:5px; width:$1%;\">",
        "type": "OnWholePage"
      }
    ],
    "appendSummary": "false",
    "enabled": "true",
    "expandRecursively": "true",
    "ignoreMoreText": "false",
    "ignoreSomeText": "false",
    "ignoreUnformatted": "false",
    "includeComments": "false",
    "replacements": [
      {
        "afterFixes": "true",
        "comment": "",
        "enabled": "true",
        "find": "<!--!!!!Marked\\ for\\ Bot!!!!-->",
        "isRegex": "false",
        "minor": "false",
        "regexOptions": "IgnoreCase",
        "replace": ""
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "true",
        "find": "cellspaing",
        "isRegex": "false",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "cellspacing"
      },
      {
        "afterFixes": "true",
        "comment": "",
        "enabled": "true",
        "find": "\\*\\[\\[]]",
        "isRegex": "false",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": ""
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "true",
        "find": "\\[\\[ *([^\\|]*?) *(?:\\| *\\1 *)?\\]\\]",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "None",
        "replace": "[[$1]]"
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "true",
        "find": "\\{\\{Template:",
        "isRegex": "false",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "{{"
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "true",
        "find": "^(.+?)[ \\t]+$",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase Multiline",
        "replace": "$1"
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "true",
        "find": "\\< *br *\\/? *\\>",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "<br>"
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "false",
        "find": "(?:\\<br\\>)*(\\n?^[\\:\\*]+.+?)(?:\\<br\\>)*\\n+",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase Multiline",
        "replace": "$1\\n"
      },
      {
        "afterFixes": "true",
        "comment": "",
        "enabled": "true",
        "find": "([^'])([ ']+)([^'^\\n]+?)\\2((?:\\<br\\>| )+)\\2",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "$1$2$3$4"
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "true",
        "find": "(^'''.+?)\\<br\\/?\\>(.+?''(?:<br\\/?\\>)*\\n)",
        "isRegex": "true",
        "minor": "false",
        "regexOptions": "IgnoreCase Multiline",
        "replace": "$1'''<br>\\n''$2"
      },
      {
        "afterFixes": "true",
        "comment": "",
        "enabled": "true",
        "find": "(__NOTOC__)(.+)\\n",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "$2$1\\n"
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "true",
        "find": "(\\[\\[File\\:.+?\\]\\] *\\n)(__NOTOC__ *\\n)",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "$2$1"
      },
      {
        "afterFixes": "true",
        "comment": "",
        "enabled": "true",
        "find": "(?<=__NOTOC__(?:.*?\\n)*?)__NOTOC__",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": ""
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "true",
        "find": "(\\[\\[Category:.+?\\]\\])\\s(\\[\\[Category)",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "$1$2"
      },
      {
        "afterFixes": "true",
        "comment": "",
        "enabled": "true",
        "find": "^(.+) +$",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase Multiline",
        "replace": "$1"
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "true",
        "find": "((?:.*?\\n)+.*?)((?:\\[\\[(?:category|\\w\\w):.+?\\]\\]\\s*)+)",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "$2$1"
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "true",
        "find": "\\{\\{Rare2}}",
        "isRegex": "false",
        "minor": "false",
        "regexOptions": "IgnoreCase",
        "replace": "{{Rare|nc}}"
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "true",
        "find": "\\{\\{Exclusive2}}",
        "isRegex": "false",
        "minor": "false",
        "regexOptions": "IgnoreCase",
        "replace": "{{Exclusive|nc}}"
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "true",
        "find": "\\{\\{Temp2}}",
        "isRegex": "false",
        "minor": "false",
        "regexOptions": "IgnoreCase",
        "replace": "{{Temp|nc}}"
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "true",
        "find": "\\{\\{Augment2}}",
        "isRegex": "false",
        "minor": "false",
        "regexOptions": "IgnoreCase",
        "replace": "{{Augment|nc}}"
      },
      {
        "afterFixes": "true",
        "comment": "",
        "enabled": "true",
        "find": "^((?:\\<br\\/?\\>)+)(\\{\\|[\\w ])",
        "isRegex": "true",
        "minor": "false",
        "regexOptions": "IgnoreCase Multiline",
        "replace": "$1\\n$2"
      },
      {
        "afterFixes": "true",
        "comment": "",
        "enabled": "true",
        "find": "\\| *valign *= *\"top\" *width *= *\" *50% *\" *\\|\\s+",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "|width=\"50%\" valign=\"top\"|\\n"
      },
      {
        "afterFixes": "false",
        "comment": "",
        "enabled": "true",
        "find": "\\| *width *= *\" *50% *\" *valign *= *\" *top *\" *\\|\\s*",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "|width=\"50%\" valign=\"top\"|\\n"
      },
      {
        "afterFixes": "true",
        "comment": "",
        "enabled": "true",
        "find": "\\}\\}\\|width=\"50%\" valign=\"top\"\\|\\n\\|width=\"50%\" valign=\"top\"\\|",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "}}\\n|width=\"50%\" valign=\"top\"|"
      },
      {
        "afterFixes": "true",
        "comment": "",
        "enabled": "true",
        "find": "\\|\\-\\s*\\|\\}\\s*",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "|}\\n"
      },
      {
        "afterFixes": "true",
        "comment": "NOTOC",
        "enabled": "true",
        "find": "__NOTOC__(.*?__NOTOC__)",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "$1"
      },
      {
        "afterFixes": "true",
        "comment": "NOTOC",
        "enabled": "true",
        "find": "^\\n+(__NOTOC__)",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "$1"
      },
      {
        "afterFixes": "true",
        "comment": "Whitespace",
        "enabled": "true",
        "find": "(.*?) +\\n",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "$1\\n"
      },
      {
        "afterFixes": "false",
        "comment": "Whitespace",
        "enabled": "true",
        "find": " +",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": " "
      },
      {
        "afterFixes": "false",
        "comment": "Whitespace",
        "enabled": "true",
        "find": "(?<=\\[\\[|\\{\\{) *(.*?) *(?=\\]\\]|\\}\\})",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "$1"
      },
      {
        "afterFixes": "false",
        "comment": "Whitespace",
        "enabled": "true",
        "find": "(?<=(?:\\[\\[|\\{\\{).*?) *\\| *(?=.*?(?:\\]\\]|\\}\\}))",
        "isRegex": "true",
        "minor": "true",
        "regexOptions": "IgnoreCase",
        "replace": "|"
      }
    ],
    "substTemplates": null
  },
  "generalPreferences": {
    "addIgnoredToLog": "false",
    "addToWatchlist": "2",
    "addUsingAWBToSummaries": "false",
    "autoFilterDuplicates": "false",
    "autoSaveSettings": "true",
    "beep": "false",
    "bypassRedirect": "true",
    "clearPageListOnProjectChange": "false",
    "diffInBotMode": "true",
    "editToolbarEnabled": "false",
    "filterNonMainNamespace": "false",
    "findIsCaseSensitive": "false",
    "findIsRegex": "false",
    "findText": "",
    "flash": "false",
    "focusAtEndOfEditBox": "false",
    "highlightAllFind": "false",
    "ignoreNoBots": "false",
    "lockSummary": "true",
    "loggingEnabled": "true",
    "lowThreadPriority": "false",
    "minimize": "false",
    "minor": "true",
    "noAutoChanges": "false",
    "noMOSComplianceFixes": "false",
    "noSectionEditSummary": "false",
    "onLoadAction": "0",
    "preParseMode": "false",
    "replaceReferenceTags": "true",
    "restrictDefaultsortAddition": "true",
    "restrictOrphanTagging": "true",
    "saveArticleList": "true",
    "scrollToUnbalancedBrackets": "false",
    "sortInterWikiOrder": "true",
    "sortListAlphabetically": "false",
    "suppressUsingAWB": "false",
    "syntaxHighlightEditBox": "false",
    "textBoxSize": "10",
    "timerEnabled": "false",
    "toolBarEnabled": "false",
    "wordWrap": "true"
  },
  "languageCode": "en",
  "project": "custom",
  "protocol": "http://",
  "skipPreferences": {
    "doesContain": "false",
    "doesContainIsAfterProcessing": "false",
    "doesContainIsCaseSensitive": "false",
    "doesContainIsRegex": "false",
    "doesContainText": "",
    "doesNotContain": "false",
    "doesNotContainIsAfterProcessing": "false",
    "doesNotContainIsCaseSensitive": "false",
    "doesNotContainIsRegex": "false",
    "doesNotContainText": "",
    "inUse": "true",
    "noAlerts": "false",
    "noChanges": "true",
    "noDisambiguation": "false",
    "noFindAndReplace": "false",
    "noLinksOnPage": "false",
    "noRegexTypoFix": "false",
    "onlyCasingChanged": "false",
    "onlyCosmetic": "false",
    "onlyGeneralFixChanges": "true",
    "onlyMinorFindAndReplace": "false",
    "onlyMinorGeneralFixChanges": "false",
    "onlyWhitespaceChanged": "true",
    "pageDoesNotExist": "true",
    "pageDontCare": "false",
    "pageExists": "false",
    "redirect": "true",
    "spamFilterBlocked": "true"
  }
}